{"ast":null,"code":"'use strict';\n\nimport { registerReanimatedError, reportFatalErrorOnJS } from \"./errors.js\";\nimport { isChromeDebugger, isJest, shouldBeUseWeb } from \"./PlatformChecker.js\";\nimport { runOnJS, setupMicrotasks, callMicrotasks, runOnUIImmediately, executeOnUIRuntimeSync } from \"./threads.js\";\nimport { mockedRequestAnimationFrame } from \"./mockedRequestAnimationFrame.js\";\nimport { DEFAULT_LOGGER_CONFIG, logToLogBoxAndConsole, registerLoggerConfig, replaceLoggerImplementation } from \"./logger/index.js\";\nconst IS_JEST = isJest();\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\nconst IS_CHROME_DEBUGGER = isChromeDebugger();\n\n// Override the logFunction implementation with the one that adds logs\n// with better stack traces to the LogBox (need to override it after `runOnJS`\n// is defined).\nfunction overrideLogFunctionImplementation() {\n  'worklet';\n\n  replaceLoggerImplementation(data => {\n    'worklet';\n\n    runOnJS(logToLogBoxAndConsole)(data);\n  });\n}\n\n// Register logger config and replace the log function implementation in\n// the React runtime global scope\nregisterLoggerConfig(DEFAULT_LOGGER_CONFIG);\noverrideLogFunctionImplementation();\n\n// this is for web implementation\nif (SHOULD_BE_USE_WEB) {\n  global._WORKLET = false;\n  global._log = console.log;\n  global._getAnimationTimestamp = () => performance.now();\n} else {\n  // Register ReanimatedError and logger config in the UI runtime global scope.\n  // (we are using `executeOnUIRuntimeSync` here to make sure that the changes\n  // are applied before any async operations are executed on the UI runtime)\n  executeOnUIRuntimeSync(registerReanimatedError)();\n  executeOnUIRuntimeSync(registerLoggerConfig)(DEFAULT_LOGGER_CONFIG);\n  executeOnUIRuntimeSync(overrideLogFunctionImplementation)();\n}\n\n// callGuard is only used with debug builds\nexport function callGuardDEV(fn) {\n  'worklet';\n\n  try {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return fn(...args);\n  } catch (e) {\n    if (global.__ErrorUtils) {\n      global.__ErrorUtils.reportFatalError(e);\n    } else {\n      throw e;\n    }\n  }\n}\nexport function setupCallGuard() {\n  'worklet';\n\n  global.__callGuardDEV = callGuardDEV;\n  global.__ErrorUtils = {\n    reportFatalError: error => {\n      runOnJS(reportFatalErrorOnJS)({\n        message: error.message,\n        stack: error.stack\n      });\n    }\n  };\n}\n\n/**\n * Currently there seems to be a bug in the JSI layer which causes a crash when\n * we try to copy some of the console methods, i.e. `clear` or `dirxml`.\n *\n * The crash happens only in React Native 0.75. It's not reproducible in neither\n * 0.76 nor 0.74. It also happens only in the configuration of a debug app and\n * production bundle.\n *\n * I haven't yet discovered what exactly causes the crash. It's tied to the\n * console methods sometimes being `HostFunction`s. Therefore, as a workaround\n * we don't copy the methods as they are in the original console object, we copy\n * JavaScript wrappers instead.\n */\nfunction createMemorySafeCapturableConsole() {\n  const consoleCopy = Object.fromEntries(Object.entries(console).map(_ref => {\n    let [methodName, method] = _ref;\n    const methodWrapper = function methodWrapper() {\n      return method(...arguments);\n    };\n    if (method.name) {\n      /**\n       * Set the original method name as the wrapper name if available.\n       *\n       * It might be unnecessary but if we want to fully mimic the console\n       * object we should take into the account the fact some code might rely\n       * on the method name.\n       */\n      Object.defineProperty(methodWrapper, 'name', {\n        value: method.name,\n        writable: false\n      });\n    }\n    return [methodName, methodWrapper];\n  }));\n  return consoleCopy;\n}\n\n// We really have to create a copy of console here. Function runOnJS we use on elements inside\n// this object makes it not configurable\nconst capturableConsole = createMemorySafeCapturableConsole();\nexport function setupConsole() {\n  'worklet';\n\n  if (!IS_CHROME_DEBUGGER) {\n    // @ts-ignore TypeScript doesn't like that there are missing methods in console object, but we don't provide all the methods for the UI runtime console version\n    global.console = {\n      /* eslint-disable @typescript-eslint/unbound-method */\n      assert: runOnJS(capturableConsole.assert),\n      debug: runOnJS(capturableConsole.debug),\n      log: runOnJS(capturableConsole.log),\n      warn: runOnJS(capturableConsole.warn),\n      error: runOnJS(capturableConsole.error),\n      info: runOnJS(capturableConsole.info)\n      /* eslint-enable @typescript-eslint/unbound-method */\n    };\n  }\n}\nfunction setupRequestAnimationFrame() {\n  'worklet';\n\n  // Jest mocks requestAnimationFrame API and it does not like if that mock gets overridden\n  // so we avoid doing requestAnimationFrame batching in Jest environment.\n  const nativeRequestAnimationFrame = global.requestAnimationFrame;\n  let animationFrameCallbacks = [];\n  let flushRequested = false;\n  global.__flushAnimationFrame = frameTimestamp => {\n    const currentCallbacks = animationFrameCallbacks;\n    animationFrameCallbacks = [];\n    currentCallbacks.forEach(f => f(frameTimestamp));\n    callMicrotasks();\n  };\n  global.requestAnimationFrame = callback => {\n    animationFrameCallbacks.push(callback);\n    if (!flushRequested) {\n      flushRequested = true;\n      nativeRequestAnimationFrame(timestamp => {\n        flushRequested = false;\n        global.__frameTimestamp = timestamp;\n        global.__flushAnimationFrame(timestamp);\n        global.__frameTimestamp = undefined;\n      });\n    }\n    // Reanimated currently does not support cancelling callbacks requested with\n    // requestAnimationFrame. We return -1 as identifier which isn't in line\n    // with the spec but it should give users better clue in case they actually\n    // attempt to store the value returned from rAF and use it for cancelling.\n    return -1;\n  };\n}\nexport function initializeUIRuntime() {\n  if (IS_JEST) {\n    // requestAnimationFrame react-native jest's setup is incorrect as it polyfills\n    // the method directly using setTimeout, therefore the callback doesn't get the\n    // expected timestamp as the only argument: https://github.com/facebook/react-native/blob/main/packages/react-native/jest/setup.js#L28\n    // We override this setup here to make sure that callbacks get the proper timestamps\n    // when executed. For non-jest environments we define requestAnimationFrame in setupRequestAnimationFrame\n    // @ts-ignore TypeScript uses Node definition for rAF, setTimeout, etc which returns a Timeout object rather than a number\n    globalThis.requestAnimationFrame = mockedRequestAnimationFrame;\n  }\n  runOnUIImmediately(() => {\n    'worklet';\n\n    setupCallGuard();\n    setupConsole();\n    if (!SHOULD_BE_USE_WEB) {\n      setupMicrotasks();\n      setupRequestAnimationFrame();\n    }\n  })();\n}","map":{"version":3,"names":["registerReanimatedError","reportFatalErrorOnJS","isChromeDebugger","isJest","shouldBeUseWeb","runOnJS","setupMicrotasks","callMicrotasks","runOnUIImmediately","executeOnUIRuntimeSync","mockedRequestAnimationFrame","DEFAULT_LOGGER_CONFIG","logToLogBoxAndConsole","registerLoggerConfig","replaceLoggerImplementation","IS_JEST","SHOULD_BE_USE_WEB","IS_CHROME_DEBUGGER","overrideLogFunctionImplementation","data","global","_WORKLET","_log","console","log","_getAnimationTimestamp","performance","now","callGuardDEV","fn","_len","arguments","length","args","Array","_key","e","__ErrorUtils","reportFatalError","setupCallGuard","__callGuardDEV","error","message","stack","createMemorySafeCapturableConsole","consoleCopy","Object","fromEntries","entries","map","_ref","methodName","method","methodWrapper","name","defineProperty","value","writable","capturableConsole","setupConsole","assert","debug","warn","info","setupRequestAnimationFrame","nativeRequestAnimationFrame","requestAnimationFrame","animationFrameCallbacks","flushRequested","__flushAnimationFrame","frameTimestamp","currentCallbacks","forEach","f","callback","push","timestamp","__frameTimestamp","undefined","initializeUIRuntime","globalThis"],"sources":["/Users/carter/WebstormProjects/personal-website/node_modules/react-native-reanimated/src/initializers.ts"],"sourcesContent":["'use strict';\nimport { registerReanimatedError, reportFatalErrorOnJS } from './errors';\nimport { isChromeDebugger, isJest, shouldBeUseWeb } from './PlatformChecker';\nimport {\n  runOnJS,\n  setupMicrotasks,\n  callMicrotasks,\n  runOnUIImmediately,\n  executeOnUIRuntimeSync,\n} from './threads';\nimport { mockedRequestAnimationFrame } from './mockedRequestAnimationFrame';\nimport {\n  DEFAULT_LOGGER_CONFIG,\n  logToLogBoxAndConsole,\n  registerLoggerConfig,\n  replaceLoggerImplementation,\n} from './logger';\n\nconst IS_JEST = isJest();\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\nconst IS_CHROME_DEBUGGER = isChromeDebugger();\n\n// Override the logFunction implementation with the one that adds logs\n// with better stack traces to the LogBox (need to override it after `runOnJS`\n// is defined).\nfunction overrideLogFunctionImplementation() {\n  'worklet';\n  replaceLoggerImplementation((data) => {\n    'worklet';\n    runOnJS(logToLogBoxAndConsole)(data);\n  });\n}\n\n// Register logger config and replace the log function implementation in\n// the React runtime global scope\nregisterLoggerConfig(DEFAULT_LOGGER_CONFIG);\noverrideLogFunctionImplementation();\n\n// this is for web implementation\nif (SHOULD_BE_USE_WEB) {\n  global._WORKLET = false;\n  global._log = console.log;\n  global._getAnimationTimestamp = () => performance.now();\n} else {\n  // Register ReanimatedError and logger config in the UI runtime global scope.\n  // (we are using `executeOnUIRuntimeSync` here to make sure that the changes\n  // are applied before any async operations are executed on the UI runtime)\n  executeOnUIRuntimeSync(registerReanimatedError)();\n  executeOnUIRuntimeSync(registerLoggerConfig)(DEFAULT_LOGGER_CONFIG);\n  executeOnUIRuntimeSync(overrideLogFunctionImplementation)();\n}\n\n// callGuard is only used with debug builds\nexport function callGuardDEV<Args extends unknown[], ReturnValue>(\n  fn: (...args: Args) => ReturnValue,\n  ...args: Args\n): ReturnValue | void {\n  'worklet';\n  try {\n    return fn(...args);\n  } catch (e) {\n    if (global.__ErrorUtils) {\n      global.__ErrorUtils.reportFatalError(e as Error);\n    } else {\n      throw e;\n    }\n  }\n}\n\nexport function setupCallGuard() {\n  'worklet';\n  global.__callGuardDEV = callGuardDEV;\n  global.__ErrorUtils = {\n    reportFatalError: (error: Error) => {\n      runOnJS(reportFatalErrorOnJS)({\n        message: error.message,\n        stack: error.stack,\n      });\n    },\n  };\n}\n\n/**\n * Currently there seems to be a bug in the JSI layer which causes a crash when\n * we try to copy some of the console methods, i.e. `clear` or `dirxml`.\n *\n * The crash happens only in React Native 0.75. It's not reproducible in neither\n * 0.76 nor 0.74. It also happens only in the configuration of a debug app and\n * production bundle.\n *\n * I haven't yet discovered what exactly causes the crash. It's tied to the\n * console methods sometimes being `HostFunction`s. Therefore, as a workaround\n * we don't copy the methods as they are in the original console object, we copy\n * JavaScript wrappers instead.\n */\nfunction createMemorySafeCapturableConsole(): typeof console {\n  const consoleCopy = Object.fromEntries(\n    Object.entries(console).map(([methodName, method]) => {\n      const methodWrapper = function methodWrapper(...args: unknown[]) {\n        return method(...args);\n      };\n      if (method.name) {\n        /**\n         * Set the original method name as the wrapper name if available.\n         *\n         * It might be unnecessary but if we want to fully mimic the console\n         * object we should take into the account the fact some code might rely\n         * on the method name.\n         */\n        Object.defineProperty(methodWrapper, 'name', {\n          value: method.name,\n          writable: false,\n        });\n      }\n      return [methodName, methodWrapper];\n    })\n  );\n\n  return consoleCopy as unknown as typeof console;\n}\n\n// We really have to create a copy of console here. Function runOnJS we use on elements inside\n// this object makes it not configurable\nconst capturableConsole = createMemorySafeCapturableConsole();\n\nexport function setupConsole() {\n  'worklet';\n  if (!IS_CHROME_DEBUGGER) {\n    // @ts-ignore TypeScript doesn't like that there are missing methods in console object, but we don't provide all the methods for the UI runtime console version\n    global.console = {\n      /* eslint-disable @typescript-eslint/unbound-method */\n      assert: runOnJS(capturableConsole.assert),\n      debug: runOnJS(capturableConsole.debug),\n      log: runOnJS(capturableConsole.log),\n      warn: runOnJS(capturableConsole.warn),\n      error: runOnJS(capturableConsole.error),\n      info: runOnJS(capturableConsole.info),\n      /* eslint-enable @typescript-eslint/unbound-method */\n    };\n  }\n}\n\nfunction setupRequestAnimationFrame() {\n  'worklet';\n\n  // Jest mocks requestAnimationFrame API and it does not like if that mock gets overridden\n  // so we avoid doing requestAnimationFrame batching in Jest environment.\n  const nativeRequestAnimationFrame = global.requestAnimationFrame;\n\n  let animationFrameCallbacks: Array<(timestamp: number) => void> = [];\n  let flushRequested = false;\n\n  global.__flushAnimationFrame = (frameTimestamp: number) => {\n    const currentCallbacks = animationFrameCallbacks;\n    animationFrameCallbacks = [];\n    currentCallbacks.forEach((f) => f(frameTimestamp));\n    callMicrotasks();\n  };\n\n  global.requestAnimationFrame = (\n    callback: (timestamp: number) => void\n  ): number => {\n    animationFrameCallbacks.push(callback);\n    if (!flushRequested) {\n      flushRequested = true;\n      nativeRequestAnimationFrame((timestamp) => {\n        flushRequested = false;\n        global.__frameTimestamp = timestamp;\n        global.__flushAnimationFrame(timestamp);\n        global.__frameTimestamp = undefined;\n      });\n    }\n    // Reanimated currently does not support cancelling callbacks requested with\n    // requestAnimationFrame. We return -1 as identifier which isn't in line\n    // with the spec but it should give users better clue in case they actually\n    // attempt to store the value returned from rAF and use it for cancelling.\n    return -1;\n  };\n}\n\nexport function initializeUIRuntime() {\n  if (IS_JEST) {\n    // requestAnimationFrame react-native jest's setup is incorrect as it polyfills\n    // the method directly using setTimeout, therefore the callback doesn't get the\n    // expected timestamp as the only argument: https://github.com/facebook/react-native/blob/main/packages/react-native/jest/setup.js#L28\n    // We override this setup here to make sure that callbacks get the proper timestamps\n    // when executed. For non-jest environments we define requestAnimationFrame in setupRequestAnimationFrame\n    // @ts-ignore TypeScript uses Node definition for rAF, setTimeout, etc which returns a Timeout object rather than a number\n    globalThis.requestAnimationFrame = mockedRequestAnimationFrame;\n  }\n\n  runOnUIImmediately(() => {\n    'worklet';\n    setupCallGuard();\n    setupConsole();\n    if (!SHOULD_BE_USE_WEB) {\n      setupMicrotasks();\n      setupRequestAnimationFrame();\n    }\n  })();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}