{"ast":null,"code":"'use strict';\n\nimport _classPrivateFieldInitSpec from \"/Users/carter/WebstormProjects/personal-website/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/carter/WebstormProjects/personal-website/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/carter/WebstormProjects/personal-website/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nimport _objectSpread from \"/Users/carter/WebstormProjects/personal-website/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { registerEventHandler, unregisterEventHandler } from \"./core.js\";\nimport { shouldBeUseWeb } from \"./PlatformChecker.js\";\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n// In JS implementation (e.g. for web) we don't use Reanimated's\n// event emitter, therefore we have to handle here\n// the event that came from React Native and convert it.\nfunction jsListener(eventName, handler) {\n  return evt => {\n    handler(_objectSpread(_objectSpread({}, evt.nativeEvent), {}, {\n      eventName\n    }));\n  };\n}\nvar _viewTags = /*#__PURE__*/new WeakMap();\nvar _registrations = /*#__PURE__*/new WeakMap();\nclass WorkletEventHandlerNative {\n  // keys are viewTags, values are arrays of registration ID's for each viewTag\n  constructor(worklet, eventNames) {\n    _classPrivateFieldInitSpec(this, _viewTags, void 0);\n    _classPrivateFieldInitSpec(this, _registrations, void 0);\n    this.worklet = worklet;\n    this.eventNames = eventNames;\n    _classPrivateFieldSet(_viewTags, this, new Set());\n    _classPrivateFieldSet(_registrations, this, new Map());\n  }\n  updateEventHandler(newWorklet, newEvents) {\n    // Update worklet and event names\n    this.worklet = newWorklet;\n    this.eventNames = newEvents;\n\n    // Detach all events\n    _classPrivateFieldGet(_registrations, this).forEach(registrationIDs => {\n      registrationIDs.forEach(id => unregisterEventHandler(id));\n      // No need to remove registrationIDs from map, since it gets overwritten when attaching\n    });\n\n    // Attach new events with new worklet\n    Array.from(_classPrivateFieldGet(_viewTags, this)).forEach(tag => {\n      const newRegistrations = this.eventNames.map(eventName => registerEventHandler(this.worklet, eventName, tag));\n      _classPrivateFieldGet(_registrations, this).set(tag, newRegistrations);\n    });\n  }\n  registerForEvents(viewTag, fallbackEventName) {\n    _classPrivateFieldGet(_viewTags, this).add(viewTag);\n    const newRegistrations = this.eventNames.map(eventName => registerEventHandler(this.worklet, eventName, viewTag));\n    _classPrivateFieldGet(_registrations, this).set(viewTag, newRegistrations);\n    if (this.eventNames.length === 0 && fallbackEventName) {\n      const newRegistration = registerEventHandler(this.worklet, fallbackEventName, viewTag);\n      _classPrivateFieldGet(_registrations, this).set(viewTag, [newRegistration]);\n    }\n  }\n  unregisterFromEvents(viewTag) {\n    var _classPrivateFieldGet2;\n    _classPrivateFieldGet(_viewTags, this).delete(viewTag);\n    (_classPrivateFieldGet2 = _classPrivateFieldGet(_registrations, this).get(viewTag)) === null || _classPrivateFieldGet2 === void 0 || _classPrivateFieldGet2.forEach(id => {\n      unregisterEventHandler(id);\n    });\n    _classPrivateFieldGet(_registrations, this).delete(viewTag);\n  }\n}\nclass WorkletEventHandlerWeb {\n  constructor(worklet) {\n    let eventNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    this.worklet = worklet;\n    this.eventNames = eventNames;\n    this.listeners = {};\n    this.setupWebListeners();\n  }\n  setupWebListeners() {\n    this.listeners = {};\n    this.eventNames.forEach(eventName => {\n      this.listeners[eventName] = jsListener(eventName, this.worklet);\n    });\n  }\n  updateEventHandler(newWorklet, newEvents) {\n    // Update worklet and event names\n    this.worklet = newWorklet;\n    this.eventNames = newEvents;\n    this.setupWebListeners();\n  }\n  registerForEvents(_viewTag, _fallbackEventName) {\n    // noop\n  }\n  unregisterFromEvents(_viewTag) {\n    // noop\n  }\n}\nexport const WorkletEventHandler = SHOULD_BE_USE_WEB ? WorkletEventHandlerWeb : WorkletEventHandlerNative;","map":{"version":3,"names":["_classPrivateFieldInitSpec","_classPrivateFieldGet","_classPrivateFieldSet","_objectSpread","registerEventHandler","unregisterEventHandler","shouldBeUseWeb","SHOULD_BE_USE_WEB","jsListener","eventName","handler","evt","nativeEvent","_viewTags","WeakMap","_registrations","WorkletEventHandlerNative","constructor","worklet","eventNames","Set","Map","updateEventHandler","newWorklet","newEvents","forEach","registrationIDs","id","Array","from","tag","newRegistrations","map","set","registerForEvents","viewTag","fallbackEventName","add","length","newRegistration","unregisterFromEvents","_classPrivateFieldGet2","delete","get","WorkletEventHandlerWeb","arguments","undefined","listeners","setupWebListeners","_viewTag","_fallbackEventName","WorkletEventHandler"],"sources":["/Users/carter/WebstormProjects/personal-website/node_modules/react-native-reanimated/src/WorkletEventHandler.ts"],"sourcesContent":["'use strict';\nimport type { NativeSyntheticEvent } from 'react-native';\nimport { registerEventHandler, unregisterEventHandler } from './core';\nimport type {\n  EventPayload,\n  ReanimatedEvent,\n  IWorkletEventHandler,\n} from './hook/commonTypes';\nimport { shouldBeUseWeb } from './PlatformChecker';\n\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n\ntype JSEvent<Event extends object> = NativeSyntheticEvent<EventPayload<Event>>;\n\n// In JS implementation (e.g. for web) we don't use Reanimated's\n// event emitter, therefore we have to handle here\n// the event that came from React Native and convert it.\nfunction jsListener<Event extends object>(\n  eventName: string,\n  handler: (event: ReanimatedEvent<Event>) => void\n) {\n  return (evt: JSEvent<Event>) => {\n    handler({ ...evt.nativeEvent, eventName } as ReanimatedEvent<Event>);\n  };\n}\n\nclass WorkletEventHandlerNative<Event extends object>\n  implements IWorkletEventHandler<Event>\n{\n  eventNames: string[];\n  worklet: (event: ReanimatedEvent<Event>) => void;\n  #viewTags: Set<number>;\n  #registrations: Map<number, number[]>; // keys are viewTags, values are arrays of registration ID's for each viewTag\n  constructor(\n    worklet: (event: ReanimatedEvent<Event>) => void,\n    eventNames: string[]\n  ) {\n    this.worklet = worklet;\n    this.eventNames = eventNames;\n    this.#viewTags = new Set<number>();\n    this.#registrations = new Map<number, number[]>();\n  }\n\n  updateEventHandler(\n    newWorklet: (event: ReanimatedEvent<Event>) => void,\n    newEvents: string[]\n  ): void {\n    // Update worklet and event names\n    this.worklet = newWorklet;\n    this.eventNames = newEvents;\n\n    // Detach all events\n    this.#registrations.forEach((registrationIDs) => {\n      registrationIDs.forEach((id) => unregisterEventHandler(id));\n      // No need to remove registrationIDs from map, since it gets overwritten when attaching\n    });\n\n    // Attach new events with new worklet\n    Array.from(this.#viewTags).forEach((tag) => {\n      const newRegistrations = this.eventNames.map((eventName) =>\n        registerEventHandler(this.worklet, eventName, tag)\n      );\n      this.#registrations.set(tag, newRegistrations);\n    });\n  }\n\n  registerForEvents(viewTag: number, fallbackEventName?: string): void {\n    this.#viewTags.add(viewTag);\n\n    const newRegistrations = this.eventNames.map((eventName) =>\n      registerEventHandler(this.worklet, eventName, viewTag)\n    );\n    this.#registrations.set(viewTag, newRegistrations);\n\n    if (this.eventNames.length === 0 && fallbackEventName) {\n      const newRegistration = registerEventHandler(\n        this.worklet,\n        fallbackEventName,\n        viewTag\n      );\n      this.#registrations.set(viewTag, [newRegistration]);\n    }\n  }\n\n  unregisterFromEvents(viewTag: number): void {\n    this.#viewTags.delete(viewTag);\n    this.#registrations.get(viewTag)?.forEach((id) => {\n      unregisterEventHandler(id);\n    });\n    this.#registrations.delete(viewTag);\n  }\n}\n\nclass WorkletEventHandlerWeb<Event extends object>\n  implements IWorkletEventHandler<Event>\n{\n  eventNames: string[];\n  listeners:\n    | Record<string, (event: ReanimatedEvent<ReanimatedEvent<Event>>) => void>\n    | Record<string, (event: JSEvent<Event>) => void>;\n\n  worklet: (event: ReanimatedEvent<Event>) => void;\n\n  constructor(\n    worklet: (event: ReanimatedEvent<Event>) => void,\n    eventNames: string[] = []\n  ) {\n    this.worklet = worklet;\n    this.eventNames = eventNames;\n    this.listeners = {};\n    this.setupWebListeners();\n  }\n\n  setupWebListeners() {\n    this.listeners = {};\n    this.eventNames.forEach((eventName) => {\n      this.listeners[eventName] = jsListener(eventName, this.worklet);\n    });\n  }\n\n  updateEventHandler(\n    newWorklet: (event: ReanimatedEvent<Event>) => void,\n    newEvents: string[]\n  ): void {\n    // Update worklet and event names\n    this.worklet = newWorklet;\n    this.eventNames = newEvents;\n    this.setupWebListeners();\n  }\n\n  registerForEvents(_viewTag: number, _fallbackEventName?: string): void {\n    // noop\n  }\n\n  unregisterFromEvents(_viewTag: number): void {\n    // noop\n  }\n}\n\nexport const WorkletEventHandler = SHOULD_BE_USE_WEB\n  ? WorkletEventHandlerWeb\n  : WorkletEventHandlerNative;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}