{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"/Users/carter/WebstormProjects/personal-website/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { isChromeDebugger, isJest, isWeb, isWindowAvailable } from \"../PlatformChecker.js\";\nimport { SensorType } from \"../commonTypes.js\";\nimport { mockedRequestAnimationFrame } from \"../mockedRequestAnimationFrame.js\";\nimport { logger } from \"../logger/index.js\";\nimport { ReanimatedError } from \"../errors.js\";\n\n// In Node.js environments (like when static rendering with Expo Router)\n// requestAnimationFrame is unavailable, so we use our mock.\n// It also has to be mocked for Jest purposes (see `initializeUIRuntime`).\nconst requestAnimationFrameImpl = isJest() || !globalThis.requestAnimationFrame ? mockedRequestAnimationFrame : globalThis.requestAnimationFrame;\nexport default class JSReanimated {\n  constructor() {\n    _defineProperty(this, \"nextSensorId\", 0);\n    _defineProperty(this, \"sensors\", new Map());\n    _defineProperty(this, \"platform\", undefined);\n    _defineProperty(this, \"getSensorCallback\", (sensor, sensorType, eventHandler) => {\n      switch (sensorType) {\n        case SensorType.ACCELEROMETER:\n        case SensorType.GRAVITY:\n          return () => {\n            let {\n              x,\n              y,\n              z\n            } = sensor;\n\n            // Web Android sensors have a different coordinate system than iOS\n            if (this.platform === Platform.WEB_ANDROID) {\n              [x, y, z] = [-x, -y, -z];\n            }\n            // TODO TYPESCRIPT on web ShareableRef is the value itself so we call it directly\n            eventHandler({\n              x,\n              y,\n              z,\n              interfaceOrientation: 0\n            });\n          };\n        case SensorType.GYROSCOPE:\n        case SensorType.MAGNETIC_FIELD:\n          return () => {\n            const {\n              x,\n              y,\n              z\n            } = sensor;\n            // TODO TYPESCRIPT on web ShareableRef is the value itself so we call it directly\n            eventHandler({\n              x,\n              y,\n              z,\n              interfaceOrientation: 0\n            });\n          };\n        case SensorType.ROTATION:\n          return () => {\n            let [qw, qx, qy, qz] = sensor.quaternion;\n\n            // Android sensors have a different coordinate system than iOS\n            if (this.platform === Platform.WEB_ANDROID) {\n              [qy, qz] = [qz, -qy];\n            }\n\n            // reference: https://stackoverflow.com/questions/5782658/extracting-yaw-from-a-quaternion\n            const yaw = -Math.atan2(2.0 * (qy * qz + qw * qx), qw * qw - qx * qx - qy * qy + qz * qz);\n            const pitch = Math.sin(-2.0 * (qx * qz - qw * qy));\n            const roll = -Math.atan2(2.0 * (qx * qy + qw * qz), qw * qw + qx * qx - qy * qy - qz * qz);\n            // TODO TYPESCRIPT on web ShareableRef is the value itself so we call it directly\n            eventHandler({\n              qw,\n              qx,\n              qy,\n              qz,\n              yaw,\n              pitch,\n              roll,\n              interfaceOrientation: 0\n            });\n          };\n      }\n    });\n  }\n  makeShareableClone() {\n    throw new ReanimatedError('makeShareableClone should never be called in JSReanimated.');\n  }\n  scheduleOnUI(worklet) {\n    // @ts-ignore web implementation has still not been updated after the rewrite, this will be addressed once the web implementation updates are ready\n    requestAnimationFrameImpl(worklet);\n  }\n  createWorkletRuntime(_name, _initializer) {\n    throw new ReanimatedError('createWorkletRuntime is not available in JSReanimated.');\n  }\n  scheduleOnRuntime() {\n    throw new ReanimatedError('scheduleOnRuntime is not available in JSReanimated.');\n  }\n  registerEventHandler(_eventHandler, _eventName, _emitterReactTag) {\n    throw new ReanimatedError('registerEventHandler is not available in JSReanimated.');\n  }\n  unregisterEventHandler(_) {\n    throw new ReanimatedError('unregisterEventHandler is not available in JSReanimated.');\n  }\n  enableLayoutAnimations() {\n    if (isWeb()) {\n      logger.warn('Layout Animations are not supported on web yet.');\n    } else if (isJest()) {\n      logger.warn('Layout Animations are no-ops when using Jest.');\n    } else if (isChromeDebugger()) {\n      logger.warn('Layout Animations are no-ops when using Chrome Debugger.');\n    } else {\n      logger.warn('Layout Animations are not supported on this configuration.');\n    }\n  }\n  configureLayoutAnimationBatch() {\n    // no-op\n  }\n  setShouldAnimateExitingForTag() {\n    // no-op\n  }\n  registerSensor(sensorType, interval, _iosReferenceFrame, eventHandler) {\n    if (!isWindowAvailable()) {\n      // the window object is unavailable when building the server portion of a site that uses SSG\n      // this check is here to ensure that the server build won't fail\n      return -1;\n    }\n    if (this.platform === undefined) {\n      this.detectPlatform();\n    }\n    if (!(this.getSensorName(sensorType) in window)) {\n      // https://w3c.github.io/sensors/#secure-context\n      logger.warn('Sensor is not available.' + (isWeb() && location.protocol !== 'https:' ? ' Make sure you use secure origin with `npx expo start --web --https`.' : '') + (this.platform === Platform.WEB_IOS ? ' For iOS web, you will also have to also grant permission in the browser: https://dev.to/li/how-to-requestpermission-for-devicemotion-and-deviceorientation-events-in-ios-13-46g2.' : ''));\n      return -1;\n    }\n    if (this.platform === undefined) {\n      this.detectPlatform();\n    }\n    const sensor = this.initializeSensor(sensorType, interval);\n    sensor.addEventListener('reading', this.getSensorCallback(sensor, sensorType, eventHandler));\n    sensor.start();\n    this.sensors.set(this.nextSensorId, sensor);\n    return this.nextSensorId++;\n  }\n  unregisterSensor(id) {\n    const sensor = this.sensors.get(id);\n    if (sensor !== undefined) {\n      sensor.stop();\n      this.sensors.delete(id);\n    }\n  }\n  subscribeForKeyboardEvents(_) {\n    if (isWeb()) {\n      logger.warn('useAnimatedKeyboard is not available on web yet.');\n    } else if (isJest()) {\n      logger.warn('useAnimatedKeyboard is not available when using Jest.');\n    } else if (isChromeDebugger()) {\n      logger.warn('useAnimatedKeyboard is not available when using Chrome Debugger.');\n    } else {\n      logger.warn('useAnimatedKeyboard is not available on this configuration.');\n    }\n    return -1;\n  }\n  unsubscribeFromKeyboardEvents(_) {\n    // noop\n  }\n  initializeSensor(sensorType, interval) {\n    const config = interval <= 0 ? {\n      referenceFrame: 'device'\n    } : {\n      frequency: 1000 / interval\n    };\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return new window.Accelerometer(config);\n      case SensorType.GYROSCOPE:\n        return new window.Gyroscope(config);\n      case SensorType.GRAVITY:\n        return new window.GravitySensor(config);\n      case SensorType.MAGNETIC_FIELD:\n        return new window.Magnetometer(config);\n      case SensorType.ROTATION:\n        return new window.AbsoluteOrientationSensor(config);\n    }\n  }\n  getSensorName(sensorType) {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return 'Accelerometer';\n      case SensorType.GRAVITY:\n        return 'GravitySensor';\n      case SensorType.GYROSCOPE:\n        return 'Gyroscope';\n      case SensorType.MAGNETIC_FIELD:\n        return 'Magnetometer';\n      case SensorType.ROTATION:\n        return 'AbsoluteOrientationSensor';\n    }\n  }\n  detectPlatform() {\n    const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n    if (userAgent === undefined) {\n      this.platform = Platform.UNKNOWN;\n    } else if (/iPad|iPhone|iPod/.test(userAgent)) {\n      this.platform = Platform.WEB_IOS;\n    } else if (/android/i.test(userAgent)) {\n      this.platform = Platform.WEB_ANDROID;\n    } else {\n      this.platform = Platform.WEB;\n    }\n  }\n  getViewProp(_viewTag, _propName, _component, _callback) {\n    throw new ReanimatedError('getViewProp is not available in JSReanimated.');\n  }\n  configureProps() {\n    throw new ReanimatedError('configureProps is not available in JSReanimated.');\n  }\n  executeOnUIRuntimeSync(_shareable) {\n    throw new ReanimatedError('`executeOnUIRuntimeSync` is not available in JSReanimated.');\n  }\n}\nvar Platform = /*#__PURE__*/function (Platform) {\n  Platform[\"WEB_IOS\"] = \"web iOS\";\n  Platform[\"WEB_ANDROID\"] = \"web Android\";\n  Platform[\"WEB\"] = \"web\";\n  Platform[\"UNKNOWN\"] = \"unknown\";\n  return Platform;\n}(Platform || {});","map":{"version":3,"names":["_defineProperty","isChromeDebugger","isJest","isWeb","isWindowAvailable","SensorType","mockedRequestAnimationFrame","logger","ReanimatedError","requestAnimationFrameImpl","globalThis","requestAnimationFrame","JSReanimated","constructor","Map","undefined","sensor","sensorType","eventHandler","ACCELEROMETER","GRAVITY","x","y","z","platform","Platform","WEB_ANDROID","interfaceOrientation","GYROSCOPE","MAGNETIC_FIELD","ROTATION","qw","qx","qy","qz","quaternion","yaw","Math","atan2","pitch","sin","roll","makeShareableClone","scheduleOnUI","worklet","createWorkletRuntime","_name","_initializer","scheduleOnRuntime","registerEventHandler","_eventHandler","_eventName","_emitterReactTag","unregisterEventHandler","_","enableLayoutAnimations","warn","configureLayoutAnimationBatch","setShouldAnimateExitingForTag","registerSensor","interval","_iosReferenceFrame","detectPlatform","getSensorName","window","location","protocol","WEB_IOS","initializeSensor","addEventListener","getSensorCallback","start","sensors","set","nextSensorId","unregisterSensor","id","get","stop","delete","subscribeForKeyboardEvents","unsubscribeFromKeyboardEvents","config","referenceFrame","frequency","Accelerometer","Gyroscope","GravitySensor","Magnetometer","AbsoluteOrientationSensor","userAgent","navigator","vendor","opera","UNKNOWN","test","WEB","getViewProp","_viewTag","_propName","_component","_callback","configureProps","executeOnUIRuntimeSync","_shareable"],"sources":["/Users/carter/WebstormProjects/personal-website/node_modules/react-native-reanimated/src/js-reanimated/JSReanimated.ts"],"sourcesContent":["'use strict';\nimport {\n  isChromeDebugger,\n  isJest,\n  isWeb,\n  isWindowAvailable,\n} from '../PlatformChecker';\nimport type { ShareableRef, Value3D, ValueRotation } from '../commonTypes';\nimport { SensorType } from '../commonTypes';\nimport type { WebSensor } from './WebSensor';\nimport { mockedRequestAnimationFrame } from '../mockedRequestAnimationFrame';\nimport type { WorkletRuntime } from '../runtimes';\nimport { logger } from '../logger';\nimport { ReanimatedError } from '../errors';\n\n// In Node.js environments (like when static rendering with Expo Router)\n// requestAnimationFrame is unavailable, so we use our mock.\n// It also has to be mocked for Jest purposes (see `initializeUIRuntime`).\nconst requestAnimationFrameImpl =\n  isJest() || !globalThis.requestAnimationFrame\n    ? mockedRequestAnimationFrame\n    : globalThis.requestAnimationFrame;\n\nexport default class JSReanimated {\n  nextSensorId = 0;\n  sensors = new Map<number, WebSensor>();\n  platform?: Platform = undefined;\n\n  makeShareableClone<T>(): ShareableRef<T> {\n    throw new ReanimatedError(\n      'makeShareableClone should never be called in JSReanimated.'\n    );\n  }\n\n  scheduleOnUI<T>(worklet: ShareableRef<T>) {\n    // @ts-ignore web implementation has still not been updated after the rewrite, this will be addressed once the web implementation updates are ready\n    requestAnimationFrameImpl(worklet);\n  }\n\n  createWorkletRuntime(\n    _name: string,\n    _initializer: ShareableRef<() => void>\n  ): WorkletRuntime {\n    throw new ReanimatedError(\n      'createWorkletRuntime is not available in JSReanimated.'\n    );\n  }\n\n  scheduleOnRuntime() {\n    throw new ReanimatedError(\n      'scheduleOnRuntime is not available in JSReanimated.'\n    );\n  }\n\n  registerEventHandler<T>(\n    _eventHandler: ShareableRef<T>,\n    _eventName: string,\n    _emitterReactTag: number\n  ): number {\n    throw new ReanimatedError(\n      'registerEventHandler is not available in JSReanimated.'\n    );\n  }\n\n  unregisterEventHandler(_: number): void {\n    throw new ReanimatedError(\n      'unregisterEventHandler is not available in JSReanimated.'\n    );\n  }\n\n  enableLayoutAnimations() {\n    if (isWeb()) {\n      logger.warn('Layout Animations are not supported on web yet.');\n    } else if (isJest()) {\n      logger.warn('Layout Animations are no-ops when using Jest.');\n    } else if (isChromeDebugger()) {\n      logger.warn('Layout Animations are no-ops when using Chrome Debugger.');\n    } else {\n      logger.warn('Layout Animations are not supported on this configuration.');\n    }\n  }\n\n  configureLayoutAnimationBatch() {\n    // no-op\n  }\n\n  setShouldAnimateExitingForTag() {\n    // no-op\n  }\n\n  registerSensor(\n    sensorType: SensorType,\n    interval: number,\n    _iosReferenceFrame: number,\n    eventHandler: ShareableRef<(data: Value3D | ValueRotation) => void>\n  ): number {\n    if (!isWindowAvailable()) {\n      // the window object is unavailable when building the server portion of a site that uses SSG\n      // this check is here to ensure that the server build won't fail\n      return -1;\n    }\n\n    if (this.platform === undefined) {\n      this.detectPlatform();\n    }\n\n    if (!(this.getSensorName(sensorType) in window)) {\n      // https://w3c.github.io/sensors/#secure-context\n      logger.warn(\n        'Sensor is not available.' +\n          (isWeb() && location.protocol !== 'https:'\n            ? ' Make sure you use secure origin with `npx expo start --web --https`.'\n            : '') +\n          (this.platform === Platform.WEB_IOS\n            ? ' For iOS web, you will also have to also grant permission in the browser: https://dev.to/li/how-to-requestpermission-for-devicemotion-and-deviceorientation-events-in-ios-13-46g2.'\n            : '')\n      );\n      return -1;\n    }\n\n    if (this.platform === undefined) {\n      this.detectPlatform();\n    }\n\n    const sensor: WebSensor = this.initializeSensor(sensorType, interval);\n    sensor.addEventListener(\n      'reading',\n      this.getSensorCallback(sensor, sensorType, eventHandler)\n    );\n    sensor.start();\n\n    this.sensors.set(this.nextSensorId, sensor);\n    return this.nextSensorId++;\n  }\n\n  getSensorCallback = (\n    sensor: WebSensor,\n    sensorType: SensorType,\n    eventHandler: ShareableRef<(data: Value3D | ValueRotation) => void>\n  ) => {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n      case SensorType.GRAVITY:\n        return () => {\n          let { x, y, z } = sensor;\n\n          // Web Android sensors have a different coordinate system than iOS\n          if (this.platform === Platform.WEB_ANDROID) {\n            [x, y, z] = [-x, -y, -z];\n          }\n          // TODO TYPESCRIPT on web ShareableRef is the value itself so we call it directly\n          (eventHandler as any)({ x, y, z, interfaceOrientation: 0 });\n        };\n      case SensorType.GYROSCOPE:\n      case SensorType.MAGNETIC_FIELD:\n        return () => {\n          const { x, y, z } = sensor;\n          // TODO TYPESCRIPT on web ShareableRef is the value itself so we call it directly\n          (eventHandler as any)({ x, y, z, interfaceOrientation: 0 });\n        };\n      case SensorType.ROTATION:\n        return () => {\n          let [qw, qx, qy, qz] = sensor.quaternion;\n\n          // Android sensors have a different coordinate system than iOS\n          if (this.platform === Platform.WEB_ANDROID) {\n            [qy, qz] = [qz, -qy];\n          }\n\n          // reference: https://stackoverflow.com/questions/5782658/extracting-yaw-from-a-quaternion\n          const yaw = -Math.atan2(\n            2.0 * (qy * qz + qw * qx),\n            qw * qw - qx * qx - qy * qy + qz * qz\n          );\n          const pitch = Math.sin(-2.0 * (qx * qz - qw * qy));\n          const roll = -Math.atan2(\n            2.0 * (qx * qy + qw * qz),\n            qw * qw + qx * qx - qy * qy - qz * qz\n          );\n          // TODO TYPESCRIPT on web ShareableRef is the value itself so we call it directly\n          (eventHandler as any)({\n            qw,\n            qx,\n            qy,\n            qz,\n            yaw,\n            pitch,\n            roll,\n            interfaceOrientation: 0,\n          });\n        };\n    }\n  };\n\n  unregisterSensor(id: number): void {\n    const sensor: WebSensor | undefined = this.sensors.get(id);\n    if (sensor !== undefined) {\n      sensor.stop();\n      this.sensors.delete(id);\n    }\n  }\n\n  subscribeForKeyboardEvents(_: ShareableRef<number>): number {\n    if (isWeb()) {\n      logger.warn('useAnimatedKeyboard is not available on web yet.');\n    } else if (isJest()) {\n      logger.warn('useAnimatedKeyboard is not available when using Jest.');\n    } else if (isChromeDebugger()) {\n      logger.warn(\n        'useAnimatedKeyboard is not available when using Chrome Debugger.'\n      );\n    } else {\n      logger.warn(\n        'useAnimatedKeyboard is not available on this configuration.'\n      );\n    }\n    return -1;\n  }\n\n  unsubscribeFromKeyboardEvents(_: number): void {\n    // noop\n  }\n\n  initializeSensor(sensorType: SensorType, interval: number): WebSensor {\n    const config =\n      interval <= 0\n        ? { referenceFrame: 'device' }\n        : { frequency: 1000 / interval };\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return new window.Accelerometer(config);\n      case SensorType.GYROSCOPE:\n        return new window.Gyroscope(config);\n      case SensorType.GRAVITY:\n        return new window.GravitySensor(config);\n      case SensorType.MAGNETIC_FIELD:\n        return new window.Magnetometer(config);\n      case SensorType.ROTATION:\n        return new window.AbsoluteOrientationSensor(config);\n    }\n  }\n\n  getSensorName(sensorType: SensorType): string {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return 'Accelerometer';\n      case SensorType.GRAVITY:\n        return 'GravitySensor';\n      case SensorType.GYROSCOPE:\n        return 'Gyroscope';\n      case SensorType.MAGNETIC_FIELD:\n        return 'Magnetometer';\n      case SensorType.ROTATION:\n        return 'AbsoluteOrientationSensor';\n    }\n  }\n\n  detectPlatform() {\n    const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n    if (userAgent === undefined) {\n      this.platform = Platform.UNKNOWN;\n    } else if (/iPad|iPhone|iPod/.test(userAgent)) {\n      this.platform = Platform.WEB_IOS;\n    } else if (/android/i.test(userAgent)) {\n      this.platform = Platform.WEB_ANDROID;\n    } else {\n      this.platform = Platform.WEB;\n    }\n  }\n\n  getViewProp<T>(\n    _viewTag: number,\n    _propName: string,\n    _component?: React.Component,\n    _callback?: (result: T) => void\n  ): Promise<T> {\n    throw new ReanimatedError('getViewProp is not available in JSReanimated.');\n  }\n\n  configureProps() {\n    throw new ReanimatedError(\n      'configureProps is not available in JSReanimated.'\n    );\n  }\n\n  executeOnUIRuntimeSync<T, R>(_shareable: ShareableRef<T>): R {\n    throw new ReanimatedError(\n      '`executeOnUIRuntimeSync` is not available in JSReanimated.'\n    );\n  }\n}\n\nenum Platform {\n  WEB_IOS = 'web iOS',\n  WEB_ANDROID = 'web Android',\n  WEB = 'web',\n  UNKNOWN = 'unknown',\n}\n\ndeclare global {\n  interface Navigator {\n    userAgent: string;\n    vendor: string;\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAAA,OAAAA,eAAA;AACZ,SACEC,gBAAgB,EAChBC,MAAM,EACNC,KAAK,EACLC,iBAAiB,QACZ,uBAAoB;AAE3B,SAASC,UAAU,QAAQ,mBAAgB;AAE3C,SAASC,2BAA2B,QAAQ,mCAAgC;AAE5E,SAASC,MAAM,QAAQ,oBAAW;AAClC,SAASC,eAAe,QAAQ,cAAW;;AAE3C;AACA;AACA;AACA,MAAMC,yBAAyB,GAC7BP,MAAM,CAAC,CAAC,IAAI,CAACQ,UAAU,CAACC,qBAAqB,GACzCL,2BAA2B,GAC3BI,UAAU,CAACC,qBAAqB;AAEtC,eAAe,MAAMC,YAAY,CAAC;EAAAC,YAAA;IAAAb,eAAA,uBACjB,CAAC;IAAAA,eAAA,kBACN,IAAIc,GAAG,CAAoB,CAAC;IAAAd,eAAA,mBAChBe,SAAS;IAAAf,eAAA,4BA6GX,CAClBgB,MAAiB,EACjBC,UAAsB,EACtBC,YAAmE,KAChE;MACH,QAAQD,UAAU;QAChB,KAAKZ,UAAU,CAACc,aAAa;QAC7B,KAAKd,UAAU,CAACe,OAAO;UACrB,OAAO,MAAM;YACX,IAAI;cAAEC,CAAC;cAAEC,CAAC;cAAEC;YAAE,CAAC,GAAGP,MAAM;;YAExB;YACA,IAAI,IAAI,CAACQ,QAAQ,KAAKC,QAAQ,CAACC,WAAW,EAAE;cAC1C,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,GAAG,CAAC,CAACF,CAAC,EAAE,CAACC,CAAC,EAAE,CAACC,CAAC,CAAC;YAC1B;YACA;YACCL,YAAY,CAAS;cAAEG,CAAC;cAAEC,CAAC;cAAEC,CAAC;cAAEI,oBAAoB,EAAE;YAAE,CAAC,CAAC;UAC7D,CAAC;QACH,KAAKtB,UAAU,CAACuB,SAAS;QACzB,KAAKvB,UAAU,CAACwB,cAAc;UAC5B,OAAO,MAAM;YACX,MAAM;cAAER,CAAC;cAAEC,CAAC;cAAEC;YAAE,CAAC,GAAGP,MAAM;YAC1B;YACCE,YAAY,CAAS;cAAEG,CAAC;cAAEC,CAAC;cAAEC,CAAC;cAAEI,oBAAoB,EAAE;YAAE,CAAC,CAAC;UAC7D,CAAC;QACH,KAAKtB,UAAU,CAACyB,QAAQ;UACtB,OAAO,MAAM;YACX,IAAI,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,GAAGlB,MAAM,CAACmB,UAAU;;YAExC;YACA,IAAI,IAAI,CAACX,QAAQ,KAAKC,QAAQ,CAACC,WAAW,EAAE;cAC1C,CAACO,EAAE,EAAEC,EAAE,CAAC,GAAG,CAACA,EAAE,EAAE,CAACD,EAAE,CAAC;YACtB;;YAEA;YACA,MAAMG,GAAG,GAAG,CAACC,IAAI,CAACC,KAAK,CACrB,GAAG,IAAIL,EAAE,GAAGC,EAAE,GAAGH,EAAE,GAAGC,EAAE,CAAC,EACzBD,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EACrC,CAAC;YACD,MAAMK,KAAK,GAAGF,IAAI,CAACG,GAAG,CAAC,CAAC,GAAG,IAAIR,EAAE,GAAGE,EAAE,GAAGH,EAAE,GAAGE,EAAE,CAAC,CAAC;YAClD,MAAMQ,IAAI,GAAG,CAACJ,IAAI,CAACC,KAAK,CACtB,GAAG,IAAIN,EAAE,GAAGC,EAAE,GAAGF,EAAE,GAAGG,EAAE,CAAC,EACzBH,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EACrC,CAAC;YACD;YACChB,YAAY,CAAS;cACpBa,EAAE;cACFC,EAAE;cACFC,EAAE;cACFC,EAAE;cACFE,GAAG;cACHG,KAAK;cACLE,IAAI;cACJd,oBAAoB,EAAE;YACxB,CAAC,CAAC;UACJ,CAAC;MACL;IACF,CAAC;EAAA;EApKDe,kBAAkBA,CAAA,EAAuB;IACvC,MAAM,IAAIlC,eAAe,CACvB,4DACF,CAAC;EACH;EAEAmC,YAAYA,CAAIC,OAAwB,EAAE;IACxC;IACAnC,yBAAyB,CAACmC,OAAO,CAAC;EACpC;EAEAC,oBAAoBA,CAClBC,KAAa,EACbC,YAAsC,EACtB;IAChB,MAAM,IAAIvC,eAAe,CACvB,wDACF,CAAC;EACH;EAEAwC,iBAAiBA,CAAA,EAAG;IAClB,MAAM,IAAIxC,eAAe,CACvB,qDACF,CAAC;EACH;EAEAyC,oBAAoBA,CAClBC,aAA8B,EAC9BC,UAAkB,EAClBC,gBAAwB,EAChB;IACR,MAAM,IAAI5C,eAAe,CACvB,wDACF,CAAC;EACH;EAEA6C,sBAAsBA,CAACC,CAAS,EAAQ;IACtC,MAAM,IAAI9C,eAAe,CACvB,0DACF,CAAC;EACH;EAEA+C,sBAAsBA,CAAA,EAAG;IACvB,IAAIpD,KAAK,CAAC,CAAC,EAAE;MACXI,MAAM,CAACiD,IAAI,CAAC,iDAAiD,CAAC;IAChE,CAAC,MAAM,IAAItD,MAAM,CAAC,CAAC,EAAE;MACnBK,MAAM,CAACiD,IAAI,CAAC,+CAA+C,CAAC;IAC9D,CAAC,MAAM,IAAIvD,gBAAgB,CAAC,CAAC,EAAE;MAC7BM,MAAM,CAACiD,IAAI,CAAC,0DAA0D,CAAC;IACzE,CAAC,MAAM;MACLjD,MAAM,CAACiD,IAAI,CAAC,4DAA4D,CAAC;IAC3E;EACF;EAEAC,6BAA6BA,CAAA,EAAG;IAC9B;EAAA;EAGFC,6BAA6BA,CAAA,EAAG;IAC9B;EAAA;EAGFC,cAAcA,CACZ1C,UAAsB,EACtB2C,QAAgB,EAChBC,kBAA0B,EAC1B3C,YAAmE,EAC3D;IACR,IAAI,CAACd,iBAAiB,CAAC,CAAC,EAAE;MACxB;MACA;MACA,OAAO,CAAC,CAAC;IACX;IAEA,IAAI,IAAI,CAACoB,QAAQ,KAAKT,SAAS,EAAE;MAC/B,IAAI,CAAC+C,cAAc,CAAC,CAAC;IACvB;IAEA,IAAI,EAAE,IAAI,CAACC,aAAa,CAAC9C,UAAU,CAAC,IAAI+C,MAAM,CAAC,EAAE;MAC/C;MACAzD,MAAM,CAACiD,IAAI,CACT,0BAA0B,IACvBrD,KAAK,CAAC,CAAC,IAAI8D,QAAQ,CAACC,QAAQ,KAAK,QAAQ,GACtC,uEAAuE,GACvE,EAAE,CAAC,IACN,IAAI,CAAC1C,QAAQ,KAAKC,QAAQ,CAAC0C,OAAO,GAC/B,oLAAoL,GACpL,EAAE,CACV,CAAC;MACD,OAAO,CAAC,CAAC;IACX;IAEA,IAAI,IAAI,CAAC3C,QAAQ,KAAKT,SAAS,EAAE;MAC/B,IAAI,CAAC+C,cAAc,CAAC,CAAC;IACvB;IAEA,MAAM9C,MAAiB,GAAG,IAAI,CAACoD,gBAAgB,CAACnD,UAAU,EAAE2C,QAAQ,CAAC;IACrE5C,MAAM,CAACqD,gBAAgB,CACrB,SAAS,EACT,IAAI,CAACC,iBAAiB,CAACtD,MAAM,EAAEC,UAAU,EAAEC,YAAY,CACzD,CAAC;IACDF,MAAM,CAACuD,KAAK,CAAC,CAAC;IAEd,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,YAAY,EAAE1D,MAAM,CAAC;IAC3C,OAAO,IAAI,CAAC0D,YAAY,EAAE;EAC5B;EA6DAC,gBAAgBA,CAACC,EAAU,EAAQ;IACjC,MAAM5D,MAA6B,GAAG,IAAI,CAACwD,OAAO,CAACK,GAAG,CAACD,EAAE,CAAC;IAC1D,IAAI5D,MAAM,KAAKD,SAAS,EAAE;MACxBC,MAAM,CAAC8D,IAAI,CAAC,CAAC;MACb,IAAI,CAACN,OAAO,CAACO,MAAM,CAACH,EAAE,CAAC;IACzB;EACF;EAEAI,0BAA0BA,CAAC1B,CAAuB,EAAU;IAC1D,IAAInD,KAAK,CAAC,CAAC,EAAE;MACXI,MAAM,CAACiD,IAAI,CAAC,kDAAkD,CAAC;IACjE,CAAC,MAAM,IAAItD,MAAM,CAAC,CAAC,EAAE;MACnBK,MAAM,CAACiD,IAAI,CAAC,uDAAuD,CAAC;IACtE,CAAC,MAAM,IAAIvD,gBAAgB,CAAC,CAAC,EAAE;MAC7BM,MAAM,CAACiD,IAAI,CACT,kEACF,CAAC;IACH,CAAC,MAAM;MACLjD,MAAM,CAACiD,IAAI,CACT,6DACF,CAAC;IACH;IACA,OAAO,CAAC,CAAC;EACX;EAEAyB,6BAA6BA,CAAC3B,CAAS,EAAQ;IAC7C;EAAA;EAGFc,gBAAgBA,CAACnD,UAAsB,EAAE2C,QAAgB,EAAa;IACpE,MAAMsB,MAAM,GACVtB,QAAQ,IAAI,CAAC,GACT;MAAEuB,cAAc,EAAE;IAAS,CAAC,GAC5B;MAAEC,SAAS,EAAE,IAAI,GAAGxB;IAAS,CAAC;IACpC,QAAQ3C,UAAU;MAChB,KAAKZ,UAAU,CAACc,aAAa;QAC3B,OAAO,IAAI6C,MAAM,CAACqB,aAAa,CAACH,MAAM,CAAC;MACzC,KAAK7E,UAAU,CAACuB,SAAS;QACvB,OAAO,IAAIoC,MAAM,CAACsB,SAAS,CAACJ,MAAM,CAAC;MACrC,KAAK7E,UAAU,CAACe,OAAO;QACrB,OAAO,IAAI4C,MAAM,CAACuB,aAAa,CAACL,MAAM,CAAC;MACzC,KAAK7E,UAAU,CAACwB,cAAc;QAC5B,OAAO,IAAImC,MAAM,CAACwB,YAAY,CAACN,MAAM,CAAC;MACxC,KAAK7E,UAAU,CAACyB,QAAQ;QACtB,OAAO,IAAIkC,MAAM,CAACyB,yBAAyB,CAACP,MAAM,CAAC;IACvD;EACF;EAEAnB,aAAaA,CAAC9C,UAAsB,EAAU;IAC5C,QAAQA,UAAU;MAChB,KAAKZ,UAAU,CAACc,aAAa;QAC3B,OAAO,eAAe;MACxB,KAAKd,UAAU,CAACe,OAAO;QACrB,OAAO,eAAe;MACxB,KAAKf,UAAU,CAACuB,SAAS;QACvB,OAAO,WAAW;MACpB,KAAKvB,UAAU,CAACwB,cAAc;QAC5B,OAAO,cAAc;MACvB,KAAKxB,UAAU,CAACyB,QAAQ;QACtB,OAAO,2BAA2B;IACtC;EACF;EAEAgC,cAAcA,CAAA,EAAG;IACf,MAAM4B,SAAS,GAAGC,SAAS,CAACD,SAAS,IAAIC,SAAS,CAACC,MAAM,IAAI5B,MAAM,CAAC6B,KAAK;IACzE,IAAIH,SAAS,KAAK3E,SAAS,EAAE;MAC3B,IAAI,CAACS,QAAQ,GAAGC,QAAQ,CAACqE,OAAO;IAClC,CAAC,MAAM,IAAI,kBAAkB,CAACC,IAAI,CAACL,SAAS,CAAC,EAAE;MAC7C,IAAI,CAAClE,QAAQ,GAAGC,QAAQ,CAAC0C,OAAO;IAClC,CAAC,MAAM,IAAI,UAAU,CAAC4B,IAAI,CAACL,SAAS,CAAC,EAAE;MACrC,IAAI,CAAClE,QAAQ,GAAGC,QAAQ,CAACC,WAAW;IACtC,CAAC,MAAM;MACL,IAAI,CAACF,QAAQ,GAAGC,QAAQ,CAACuE,GAAG;IAC9B;EACF;EAEAC,WAAWA,CACTC,QAAgB,EAChBC,SAAiB,EACjBC,UAA4B,EAC5BC,SAA+B,EACnB;IACZ,MAAM,IAAI7F,eAAe,CAAC,+CAA+C,CAAC;EAC5E;EAEA8F,cAAcA,CAAA,EAAG;IACf,MAAM,IAAI9F,eAAe,CACvB,kDACF,CAAC;EACH;EAEA+F,sBAAsBA,CAAOC,UAA2B,EAAK;IAC3D,MAAM,IAAIhG,eAAe,CACvB,4DACF,CAAC;EACH;AACF;AAAC,IAEIiB,QAAQ,0BAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAAA,OAARA,QAAQ;AAAA,EAARA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}