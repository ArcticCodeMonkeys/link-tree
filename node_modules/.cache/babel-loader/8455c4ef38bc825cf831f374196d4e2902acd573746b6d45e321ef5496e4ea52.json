{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"/Users/carter/WebstormProjects/personal-website/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { flattenArray } from \"./utils.js\";\nimport { makeViewDescriptorsSet } from \"../ViewDescriptorsSet.js\";\nimport { adaptViewConfig } from \"../ConfigHelper.js\";\nimport updateProps from \"../UpdateProps.js\";\nimport { stopMapper, startMapper } from \"../mappers.js\";\nimport { isSharedValue } from \"../isSharedValue.js\";\nfunction isInlineStyleTransform(transform) {\n  if (!Array.isArray(transform)) {\n    return false;\n  }\n  return transform.some(t => hasInlineStyles(t));\n}\nfunction inlinePropsHasChanged(styles1, styles2) {\n  if (Object.keys(styles1).length !== Object.keys(styles2).length) {\n    return true;\n  }\n  for (const key of Object.keys(styles1)) {\n    if (styles1[key] !== styles2[key]) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction getInlinePropsUpdate(inlineProps) {\n  'worklet';\n\n  const update = {};\n  for (const [key, styleValue] of Object.entries(inlineProps)) {\n    if (isSharedValue(styleValue)) {\n      update[key] = styleValue.value;\n    } else if (Array.isArray(styleValue)) {\n      update[key] = styleValue.map(item => {\n        return getInlinePropsUpdate(item);\n      });\n    } else if (typeof styleValue === 'object') {\n      update[key] = getInlinePropsUpdate(styleValue);\n    } else {\n      update[key] = styleValue;\n    }\n  }\n  return update;\n}\nfunction extractSharedValuesMapFromProps(props) {\n  const inlineProps = {};\n  for (const key in props) {\n    const value = props[key];\n    if (key === 'style') {\n      var _props$style;\n      const styles = flattenArray((_props$style = props.style) !== null && _props$style !== void 0 ? _props$style : []);\n      styles.forEach(style => {\n        if (!style) {\n          return;\n        }\n        for (const [styleKey, styleValue] of Object.entries(style)) {\n          if (isSharedValue(styleValue)) {\n            inlineProps[styleKey] = styleValue;\n          } else if (styleKey === 'transform' && isInlineStyleTransform(styleValue)) {\n            inlineProps[styleKey] = styleValue;\n          }\n        }\n      });\n    } else if (isSharedValue(value)) {\n      inlineProps[key] = value;\n    }\n  }\n  return inlineProps;\n}\nexport function hasInlineStyles(style) {\n  if (!style) {\n    return false;\n  }\n  return Object.keys(style).some(key => {\n    const styleValue = style[key];\n    return isSharedValue(styleValue) || key === 'transform' && isInlineStyleTransform(styleValue);\n  });\n}\nexport function getInlineStyle(style, isFirstRender) {\n  if (isFirstRender) {\n    return getInlinePropsUpdate(style);\n  }\n  const newStyle = {};\n  for (const [key, styleValue] of Object.entries(style)) {\n    if (!isSharedValue(styleValue) && !(key === 'transform' && isInlineStyleTransform(styleValue))) {\n      newStyle[key] = styleValue;\n    }\n  }\n  return newStyle;\n}\nexport class InlinePropManager {\n  constructor() {\n    _defineProperty(this, \"_inlinePropsViewDescriptors\", null);\n    _defineProperty(this, \"_inlinePropsMapperId\", null);\n    _defineProperty(this, \"_inlineProps\", {});\n  }\n  attachInlineProps(animatedComponent, viewInfo) {\n    const newInlineProps = extractSharedValuesMapFromProps(animatedComponent.props);\n    const hasChanged = inlinePropsHasChanged(newInlineProps, this._inlineProps);\n    if (hasChanged) {\n      if (!this._inlinePropsViewDescriptors) {\n        this._inlinePropsViewDescriptors = makeViewDescriptorsSet();\n        const {\n          viewTag,\n          viewName,\n          shadowNodeWrapper,\n          viewConfig\n        } = viewInfo;\n        if (Object.keys(newInlineProps).length && viewConfig) {\n          adaptViewConfig(viewConfig);\n        }\n        this._inlinePropsViewDescriptors.add({\n          tag: viewTag,\n          name: viewName,\n          shadowNodeWrapper: shadowNodeWrapper\n        });\n      }\n      const shareableViewDescriptors = this._inlinePropsViewDescriptors.shareableViewDescriptors;\n      const updaterFunction = () => {\n        'worklet';\n\n        const update = getInlinePropsUpdate(newInlineProps);\n        updateProps(shareableViewDescriptors, update);\n      };\n      this._inlineProps = newInlineProps;\n      if (this._inlinePropsMapperId) {\n        stopMapper(this._inlinePropsMapperId);\n      }\n      this._inlinePropsMapperId = null;\n      if (Object.keys(newInlineProps).length) {\n        this._inlinePropsMapperId = startMapper(updaterFunction, Object.values(newInlineProps));\n      }\n    }\n  }\n  detachInlineProps() {\n    if (this._inlinePropsMapperId) {\n      stopMapper(this._inlinePropsMapperId);\n    }\n  }\n}","map":{"version":3,"names":["_defineProperty","flattenArray","makeViewDescriptorsSet","adaptViewConfig","updateProps","stopMapper","startMapper","isSharedValue","isInlineStyleTransform","transform","Array","isArray","some","t","hasInlineStyles","inlinePropsHasChanged","styles1","styles2","Object","keys","length","key","getInlinePropsUpdate","inlineProps","update","styleValue","entries","value","map","item","extractSharedValuesMapFromProps","props","_props$style","styles","style","forEach","styleKey","getInlineStyle","isFirstRender","newStyle","InlinePropManager","constructor","attachInlineProps","animatedComponent","viewInfo","newInlineProps","hasChanged","_inlineProps","_inlinePropsViewDescriptors","viewTag","viewName","shadowNodeWrapper","viewConfig","add","tag","name","shareableViewDescriptors","updaterFunction","_inlinePropsMapperId","values","detachInlineProps"],"sources":["/Users/carter/WebstormProjects/personal-website/node_modules/react-native-reanimated/src/createAnimatedComponent/InlinePropManager.ts"],"sourcesContent":["'use strict';\nimport type { StyleProps } from '../commonTypes';\nimport type {\n  IAnimatedComponentInternal,\n  AnimatedComponentProps,\n  IInlinePropManager,\n  ViewInfo,\n} from './commonTypes';\nimport { flattenArray } from './utils';\nimport { makeViewDescriptorsSet } from '../ViewDescriptorsSet';\nimport type { ViewDescriptorsSet } from '../ViewDescriptorsSet';\nimport { adaptViewConfig } from '../ConfigHelper';\nimport updateProps from '../UpdateProps';\nimport { stopMapper, startMapper } from '../mappers';\nimport { isSharedValue } from '../isSharedValue';\n\nfunction isInlineStyleTransform(transform: unknown): boolean {\n  if (!Array.isArray(transform)) {\n    return false;\n  }\n\n  return transform.some((t: Record<string, unknown>) => hasInlineStyles(t));\n}\n\nfunction inlinePropsHasChanged(\n  styles1: StyleProps,\n  styles2: StyleProps\n): boolean {\n  if (Object.keys(styles1).length !== Object.keys(styles2).length) {\n    return true;\n  }\n\n  for (const key of Object.keys(styles1)) {\n    if (styles1[key] !== styles2[key]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getInlinePropsUpdate(inlineProps: Record<string, unknown>) {\n  'worklet';\n  const update: Record<string, unknown> = {};\n  for (const [key, styleValue] of Object.entries(inlineProps)) {\n    if (isSharedValue(styleValue)) {\n      update[key] = styleValue.value;\n    } else if (Array.isArray(styleValue)) {\n      update[key] = styleValue.map((item) => {\n        return getInlinePropsUpdate(item);\n      });\n    } else if (typeof styleValue === 'object') {\n      update[key] = getInlinePropsUpdate(styleValue as Record<string, unknown>);\n    } else {\n      update[key] = styleValue;\n    }\n  }\n  return update;\n}\n\nfunction extractSharedValuesMapFromProps(\n  props: AnimatedComponentProps<\n    Record<string, unknown> /* Initial component props */\n  >\n): Record<string, unknown> {\n  const inlineProps: Record<string, unknown> = {};\n\n  for (const key in props) {\n    const value = props[key];\n    if (key === 'style') {\n      const styles = flattenArray<StyleProps>(props.style ?? []);\n      styles.forEach((style) => {\n        if (!style) {\n          return;\n        }\n        for (const [styleKey, styleValue] of Object.entries(style)) {\n          if (isSharedValue(styleValue)) {\n            inlineProps[styleKey] = styleValue;\n          } else if (\n            styleKey === 'transform' &&\n            isInlineStyleTransform(styleValue)\n          ) {\n            inlineProps[styleKey] = styleValue;\n          }\n        }\n      });\n    } else if (isSharedValue(value)) {\n      inlineProps[key] = value;\n    }\n  }\n\n  return inlineProps;\n}\n\nexport function hasInlineStyles(style: StyleProps): boolean {\n  if (!style) {\n    return false;\n  }\n  return Object.keys(style).some((key) => {\n    const styleValue = style[key];\n    return (\n      isSharedValue(styleValue) ||\n      (key === 'transform' && isInlineStyleTransform(styleValue))\n    );\n  });\n}\n\nexport function getInlineStyle(\n  style: Record<string, unknown>,\n  isFirstRender: boolean\n) {\n  if (isFirstRender) {\n    return getInlinePropsUpdate(style);\n  }\n  const newStyle: StyleProps = {};\n  for (const [key, styleValue] of Object.entries(style)) {\n    if (\n      !isSharedValue(styleValue) &&\n      !(key === 'transform' && isInlineStyleTransform(styleValue))\n    ) {\n      newStyle[key] = styleValue;\n    }\n  }\n  return newStyle;\n}\n\nexport class InlinePropManager implements IInlinePropManager {\n  _inlinePropsViewDescriptors: ViewDescriptorsSet | null = null;\n  _inlinePropsMapperId: number | null = null;\n  _inlineProps: StyleProps = {};\n\n  public attachInlineProps(\n    animatedComponent: React.Component<unknown, unknown> &\n      IAnimatedComponentInternal,\n    viewInfo: ViewInfo\n  ) {\n    const newInlineProps: Record<string, unknown> =\n      extractSharedValuesMapFromProps(animatedComponent.props);\n    const hasChanged = inlinePropsHasChanged(newInlineProps, this._inlineProps);\n\n    if (hasChanged) {\n      if (!this._inlinePropsViewDescriptors) {\n        this._inlinePropsViewDescriptors = makeViewDescriptorsSet();\n\n        const { viewTag, viewName, shadowNodeWrapper, viewConfig } = viewInfo;\n\n        if (Object.keys(newInlineProps).length && viewConfig) {\n          adaptViewConfig(viewConfig);\n        }\n\n        this._inlinePropsViewDescriptors.add({\n          tag: viewTag as number,\n          name: viewName!,\n          shadowNodeWrapper: shadowNodeWrapper!,\n        });\n      }\n      const shareableViewDescriptors =\n        this._inlinePropsViewDescriptors.shareableViewDescriptors;\n\n      const updaterFunction = () => {\n        'worklet';\n        const update = getInlinePropsUpdate(newInlineProps);\n        updateProps(shareableViewDescriptors, update);\n      };\n      this._inlineProps = newInlineProps;\n      if (this._inlinePropsMapperId) {\n        stopMapper(this._inlinePropsMapperId);\n      }\n      this._inlinePropsMapperId = null;\n      if (Object.keys(newInlineProps).length) {\n        this._inlinePropsMapperId = startMapper(\n          updaterFunction,\n          Object.values(newInlineProps)\n        );\n      }\n    }\n  }\n\n  public detachInlineProps() {\n    if (this._inlinePropsMapperId) {\n      stopMapper(this._inlinePropsMapperId);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}