{"ast":null,"code":"'use strict';\n\nimport { ComplexAnimationBuilder } from \"../animationBuilder/index.js\";\n/**\n * Roll from left animation. You can modify the behavior by chaining methods\n * like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `entering` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#roll\n */\nexport class RollInLeft extends ComplexAnimationBuilder {\n  static presetName = 'RollInLeft';\n  static createInstance() {\n    return new RollInLeft();\n  }\n  build = () => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n    return values => {\n      'worklet';\n\n      return {\n        animations: {\n          transform: [{\n            translateX: delayFunction(delay, animation(0, config))\n          }, {\n            rotate: delayFunction(delay, animation('0deg', config))\n          }]\n        },\n        initialValues: {\n          transform: [{\n            translateX: -values.windowWidth\n          }, {\n            rotate: '-180deg'\n          }],\n          ...initialValues\n        },\n        callback\n      };\n    };\n  };\n}\n\n/**\n * Roll from right animation. You can modify the behavior by chaining methods\n * like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `entering` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#roll\n */\nexport class RollInRight extends ComplexAnimationBuilder {\n  static presetName = 'RollInRight';\n  static createInstance() {\n    return new RollInRight();\n  }\n  build = () => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n    return values => {\n      'worklet';\n\n      return {\n        animations: {\n          transform: [{\n            translateX: delayFunction(delay, animation(0, config))\n          }, {\n            rotate: delayFunction(delay, animation('0deg', config))\n          }]\n        },\n        initialValues: {\n          transform: [{\n            translateX: values.windowWidth\n          }, {\n            rotate: '180deg'\n          }],\n          ...initialValues\n        },\n        callback\n      };\n    };\n  };\n}\n\n/**\n * Roll to left animation. You can modify the behavior by chaining methods like\n * `.springify()` or `.duration(500)`.\n *\n * You pass it to the `exiting` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#roll\n */\nexport class RollOutLeft extends ComplexAnimationBuilder {\n  static presetName = 'RollOutLeft';\n  static createInstance() {\n    return new RollOutLeft();\n  }\n  build = () => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n    return values => {\n      'worklet';\n\n      return {\n        animations: {\n          transform: [{\n            translateX: delayFunction(delay, animation(-values.windowWidth, config))\n          }, {\n            rotate: delayFunction(delay, animation('-180deg', config))\n          }]\n        },\n        initialValues: {\n          transform: [{\n            translateX: 0\n          }, {\n            rotate: '0deg'\n          }],\n          ...initialValues\n        },\n        callback\n      };\n    };\n  };\n}\n\n/**\n * Roll to right animation. You can modify the behavior by chaining methods like\n * `.springify()` or `.duration(500)`.\n *\n * You pass it to the `exiting` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#roll\n */\nexport class RollOutRight extends ComplexAnimationBuilder {\n  static presetName = 'RollOutRight';\n  static createInstance() {\n    return new RollOutRight();\n  }\n  build = () => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n    return values => {\n      'worklet';\n\n      return {\n        animations: {\n          transform: [{\n            translateX: delayFunction(delay, animation(values.windowWidth, config))\n          }, {\n            rotate: delayFunction(delay, animation('180deg', config))\n          }]\n        },\n        initialValues: {\n          transform: [{\n            translateX: 0\n          }, {\n            rotate: '0deg'\n          }],\n          ...initialValues\n        },\n        callback\n      };\n    };\n  };\n}","map":{"version":3,"names":["ComplexAnimationBuilder","RollInLeft","presetName","createInstance","build","delayFunction","getDelayFunction","animation","config","getAnimationAndConfig","delay","getDelay","callback","callbackV","initialValues","values","animations","transform","translateX","rotate","windowWidth","RollInRight","RollOutLeft","RollOutRight"],"sources":["/Users/carter/WebstormProjects/personal-website/node_modules/react-native-reanimated/src/layoutReanimation/defaultAnimations/Roll.ts"],"sourcesContent":["'use strict';\nimport type { BaseAnimationBuilder } from '../animationBuilder';\nimport { ComplexAnimationBuilder } from '../animationBuilder';\nimport type {\n  EntryExitAnimationsValues,\n  EntryExitAnimationFunction,\n  IEntryExitAnimationBuilder,\n} from '../animationBuilder/commonTypes';\n\n/**\n * Roll from left animation. You can modify the behavior by chaining methods\n * like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `entering` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#roll\n */\nexport class RollInLeft\n  extends ComplexAnimationBuilder\n  implements IEntryExitAnimationBuilder\n{\n  static presetName = 'RollInLeft';\n\n  static createInstance<T extends typeof BaseAnimationBuilder>(\n    this: T\n  ): InstanceType<T> {\n    return new RollInLeft() as InstanceType<T>;\n  }\n\n  build = (): EntryExitAnimationFunction => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n\n    return (values: EntryExitAnimationsValues) => {\n      'worklet';\n      return {\n        animations: {\n          transform: [\n            { translateX: delayFunction(delay, animation(0, config)) },\n            { rotate: delayFunction(delay, animation('0deg', config)) },\n          ],\n        },\n        initialValues: {\n          transform: [\n            { translateX: -values.windowWidth },\n            { rotate: '-180deg' },\n          ],\n          ...initialValues,\n        },\n        callback,\n      };\n    };\n  };\n}\n\n/**\n * Roll from right animation. You can modify the behavior by chaining methods\n * like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `entering` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#roll\n */\nexport class RollInRight\n  extends ComplexAnimationBuilder\n  implements IEntryExitAnimationBuilder\n{\n  static presetName = 'RollInRight';\n\n  static createInstance<T extends typeof BaseAnimationBuilder>(\n    this: T\n  ): InstanceType<T> {\n    return new RollInRight() as InstanceType<T>;\n  }\n\n  build = (): EntryExitAnimationFunction => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n\n    return (values: EntryExitAnimationsValues) => {\n      'worklet';\n      return {\n        animations: {\n          transform: [\n            { translateX: delayFunction(delay, animation(0, config)) },\n            { rotate: delayFunction(delay, animation('0deg', config)) },\n          ],\n        },\n        initialValues: {\n          transform: [{ translateX: values.windowWidth }, { rotate: '180deg' }],\n          ...initialValues,\n        },\n        callback,\n      };\n    };\n  };\n}\n\n/**\n * Roll to left animation. You can modify the behavior by chaining methods like\n * `.springify()` or `.duration(500)`.\n *\n * You pass it to the `exiting` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#roll\n */\nexport class RollOutLeft\n  extends ComplexAnimationBuilder\n  implements IEntryExitAnimationBuilder\n{\n  static presetName = 'RollOutLeft';\n\n  static createInstance<T extends typeof BaseAnimationBuilder>(\n    this: T\n  ): InstanceType<T> {\n    return new RollOutLeft() as InstanceType<T>;\n  }\n\n  build = (): EntryExitAnimationFunction => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n\n    return (values: EntryExitAnimationsValues) => {\n      'worklet';\n      return {\n        animations: {\n          transform: [\n            {\n              translateX: delayFunction(\n                delay,\n                animation(-values.windowWidth, config)\n              ),\n            },\n            { rotate: delayFunction(delay, animation('-180deg', config)) },\n          ],\n        },\n        initialValues: {\n          transform: [{ translateX: 0 }, { rotate: '0deg' }],\n          ...initialValues,\n        },\n        callback,\n      };\n    };\n  };\n}\n\n/**\n * Roll to right animation. You can modify the behavior by chaining methods like\n * `.springify()` or `.duration(500)`.\n *\n * You pass it to the `exiting` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#roll\n */\nexport class RollOutRight\n  extends ComplexAnimationBuilder\n  implements IEntryExitAnimationBuilder\n{\n  static presetName = 'RollOutRight';\n\n  static createInstance<T extends typeof BaseAnimationBuilder>(\n    this: T\n  ): InstanceType<T> {\n    return new RollOutRight() as InstanceType<T>;\n  }\n\n  build = (): EntryExitAnimationFunction => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n\n    return (values: EntryExitAnimationsValues) => {\n      'worklet';\n      return {\n        animations: {\n          transform: [\n            {\n              translateX: delayFunction(\n                delay,\n                animation(values.windowWidth, config)\n              ),\n            },\n            { rotate: delayFunction(delay, animation('180deg', config)) },\n          ],\n        },\n        initialValues: {\n          transform: [{ translateX: 0 }, { rotate: '0deg' }],\n          ...initialValues,\n        },\n        callback,\n      };\n    };\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}