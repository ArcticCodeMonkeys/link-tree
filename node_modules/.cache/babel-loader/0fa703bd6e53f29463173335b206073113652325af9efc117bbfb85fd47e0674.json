{"ast":null,"code":"'use strict';\n\nimport { useEffect, useRef } from 'react';\nimport { initialUpdaterRun } from \"../animation/index.js\";\nimport { makeMutable, startMapper, stopMapper } from \"../core.js\";\nimport { shouldBeUseWeb } from \"../PlatformChecker.js\";\n\n/**\n * Lets you create new shared values based on existing ones while keeping them\n * reactive.\n *\n * @param updater - A function called whenever at least one of the shared values\n *   or state used in the function body changes.\n * @param dependencies - An optional array of dependencies. Only relevant when\n *   using Reanimated without the Babel plugin on the Web.\n * @returns A new readonly shared value based on a value returned from the\n *   updater function\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useDerivedValue\n */\n// @ts-expect-error This overload is required by our API.\n\nexport function useDerivedValue(updater, dependencies) {\n  var _updater$__closure;\n  const initRef = useRef(null);\n  let inputs = Object.values((_updater$__closure = updater.__closure) !== null && _updater$__closure !== void 0 ? _updater$__closure : {});\n  if (shouldBeUseWeb()) {\n    var _dependencies;\n    if (!inputs.length && (_dependencies = dependencies) !== null && _dependencies !== void 0 && _dependencies.length) {\n      // let web work without a Babel/SWC plugin\n      inputs = dependencies;\n    }\n  }\n\n  // build dependencies\n  if (dependencies === undefined) {\n    dependencies = [...inputs, updater.__workletHash];\n  } else {\n    dependencies.push(updater.__workletHash);\n  }\n  if (initRef.current === null) {\n    initRef.current = makeMutable(initialUpdaterRun(updater));\n  }\n  const sharedValue = initRef.current;\n  useEffect(() => {\n    const fun = () => {\n      'worklet';\n\n      sharedValue.value = updater();\n    };\n    const mapperId = startMapper(fun, inputs, [sharedValue]);\n    return () => {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n  return sharedValue;\n}","map":{"version":3,"names":["useEffect","useRef","initialUpdaterRun","makeMutable","startMapper","stopMapper","shouldBeUseWeb","useDerivedValue","updater","dependencies","_updater$__closure","initRef","inputs","Object","values","__closure","_dependencies","length","undefined","__workletHash","push","current","sharedValue","fun","value","mapperId"],"sources":["/Users/carter/WebstormProjects/personal-website/node_modules/react-native-reanimated/src/hook/useDerivedValue.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport { initialUpdaterRun } from '../animation';\nimport type { SharedValue, WorkletFunction } from '../commonTypes';\nimport { makeMutable, startMapper, stopMapper } from '../core';\nimport type { DependencyList } from './commonTypes';\nimport { shouldBeUseWeb } from '../PlatformChecker';\n\nexport interface DerivedValue<Value = unknown>\n  extends Readonly<Omit<SharedValue<Value>, 'set'>> {\n  /**\n   * @deprecated Derived values are readonly, don't use this method. It's here\n   *   only to prevent breaking changes in TypeScript types. It will be removed\n   *   in the future.\n   */\n  set: SharedValue<Value>['set'];\n}\n\n/**\n * Lets you create new shared values based on existing ones while keeping them\n * reactive.\n *\n * @param updater - A function called whenever at least one of the shared values\n *   or state used in the function body changes.\n * @param dependencies - An optional array of dependencies. Only relevant when\n *   using Reanimated without the Babel plugin on the Web.\n * @returns A new readonly shared value based on a value returned from the\n *   updater function\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useDerivedValue\n */\n// @ts-expect-error This overload is required by our API.\nexport function useDerivedValue<Value>(\n  updater: () => Value,\n  dependencies?: DependencyList\n): DerivedValue<Value>;\n\nexport function useDerivedValue<Value>(\n  updater: WorkletFunction<[], Value>,\n  dependencies?: DependencyList\n): DerivedValue<Value> {\n  const initRef = useRef<SharedValue<Value> | null>(null);\n  let inputs = Object.values(updater.__closure ?? {});\n  if (shouldBeUseWeb()) {\n    if (!inputs.length && dependencies?.length) {\n      // let web work without a Babel/SWC plugin\n      inputs = dependencies;\n    }\n  }\n\n  // build dependencies\n  if (dependencies === undefined) {\n    dependencies = [...inputs, updater.__workletHash];\n  } else {\n    dependencies.push(updater.__workletHash);\n  }\n\n  if (initRef.current === null) {\n    initRef.current = makeMutable(initialUpdaterRun(updater));\n  }\n\n  const sharedValue: SharedValue<Value> = initRef.current;\n\n  useEffect(() => {\n    const fun = () => {\n      'worklet';\n      sharedValue.value = updater();\n    };\n    const mapperId = startMapper(fun, inputs, [\n      sharedValue as SharedValue<unknown>,\n    ]);\n    return () => {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n\n  return sharedValue;\n}\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,iBAAiB,QAAQ,uBAAc;AAEhD,SAASC,WAAW,EAAEC,WAAW,EAAEC,UAAU,QAAQ,YAAS;AAE9D,SAASC,cAAc,QAAQ,uBAAoB;;AAYnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA,OAAO,SAASC,eAAeA,CAC7BC,OAAmC,EACnCC,YAA6B,EACR;EAAA,IAAAC,kBAAA;EACrB,MAAMC,OAAO,GAAGV,MAAM,CAA4B,IAAI,CAAC;EACvD,IAAIW,MAAM,GAAGC,MAAM,CAACC,MAAM,EAAAJ,kBAAA,GAACF,OAAO,CAACO,SAAS,cAAAL,kBAAA,cAAAA,kBAAA,GAAI,CAAC,CAAC,CAAC;EACnD,IAAIJ,cAAc,CAAC,CAAC,EAAE;IAAA,IAAAU,aAAA;IACpB,IAAI,CAACJ,MAAM,CAACK,MAAM,KAAAD,aAAA,GAAIP,YAAY,cAAAO,aAAA,eAAZA,aAAA,CAAcC,MAAM,EAAE;MAC1C;MACAL,MAAM,GAAGH,YAAY;IACvB;EACF;;EAEA;EACA,IAAIA,YAAY,KAAKS,SAAS,EAAE;IAC9BT,YAAY,GAAG,CAAC,GAAGG,MAAM,EAAEJ,OAAO,CAACW,aAAa,CAAC;EACnD,CAAC,MAAM;IACLV,YAAY,CAACW,IAAI,CAACZ,OAAO,CAACW,aAAa,CAAC;EAC1C;EAEA,IAAIR,OAAO,CAACU,OAAO,KAAK,IAAI,EAAE;IAC5BV,OAAO,CAACU,OAAO,GAAGlB,WAAW,CAACD,iBAAiB,CAACM,OAAO,CAAC,CAAC;EAC3D;EAEA,MAAMc,WAA+B,GAAGX,OAAO,CAACU,OAAO;EAEvDrB,SAAS,CAAC,MAAM;IACd,MAAMuB,GAAG,GAAGA,CAAA,KAAM;MAChB,SAAS;;MACTD,WAAW,CAACE,KAAK,GAAGhB,OAAO,CAAC,CAAC;IAC/B,CAAC;IACD,MAAMiB,QAAQ,GAAGrB,WAAW,CAACmB,GAAG,EAAEX,MAAM,EAAE,CACxCU,WAAW,CACZ,CAAC;IACF,OAAO,MAAM;MACXjB,UAAU,CAACoB,QAAQ,CAAC;IACtB,CAAC;EACH,CAAC,EAAEhB,YAAY,CAAC;EAEhB,OAAOa,WAAW;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}