{"ast":null,"code":"'use strict';\n\nimport _objectSpread from \"/Users/carter/WebstormProjects/personal-website/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/Users/carter/WebstormProjects/personal-website/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { ComplexAnimationBuilder } from \"../animationBuilder/index.js\";\n\n/**\n * Stretch animation on the X axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `entering` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\nexport class StretchInX extends ComplexAnimationBuilder {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"build\", () => {\n      const delayFunction = this.getDelayFunction();\n      const [animation, config] = this.getAnimationAndConfig();\n      const delay = this.getDelay();\n      const callback = this.callbackV;\n      const initialValues = this.initialValues;\n      return () => {\n        'worklet';\n\n        return {\n          animations: {\n            transform: [{\n              scaleX: delayFunction(delay, animation(1, config))\n            }]\n          },\n          initialValues: _objectSpread({\n            transform: [{\n              scaleX: 0\n            }]\n          }, initialValues),\n          callback\n        };\n      };\n    });\n  }\n  static createInstance() {\n    return new StretchInX();\n  }\n}\n\n/**\n * Stretch animation on the Y axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `entering` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\n_defineProperty(StretchInX, \"presetName\", 'StretchInX');\nexport class StretchInY extends ComplexAnimationBuilder {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"build\", () => {\n      const delayFunction = this.getDelayFunction();\n      const [animation, config] = this.getAnimationAndConfig();\n      const delay = this.getDelay();\n      const callback = this.callbackV;\n      const initialValues = this.initialValues;\n      return () => {\n        'worklet';\n\n        return {\n          animations: {\n            transform: [{\n              scaleY: delayFunction(delay, animation(1, config))\n            }]\n          },\n          initialValues: _objectSpread({\n            transform: [{\n              scaleY: 0\n            }]\n          }, initialValues),\n          callback\n        };\n      };\n    });\n  }\n  static createInstance() {\n    return new StretchInY();\n  }\n}\n\n/**\n * Stretch animation on the X axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `exiting` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\n_defineProperty(StretchInY, \"presetName\", 'StretchInY');\nexport class StretchOutX extends ComplexAnimationBuilder {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"build\", () => {\n      const delayFunction = this.getDelayFunction();\n      const [animation, config] = this.getAnimationAndConfig();\n      const delay = this.getDelay();\n      const callback = this.callbackV;\n      const initialValues = this.initialValues;\n      return () => {\n        'worklet';\n\n        return {\n          animations: {\n            transform: [{\n              scaleX: delayFunction(delay, animation(0, config))\n            }]\n          },\n          initialValues: _objectSpread({\n            transform: [{\n              scaleX: 1\n            }]\n          }, initialValues),\n          callback\n        };\n      };\n    });\n  }\n  static createInstance() {\n    return new StretchOutX();\n  }\n}\n\n/**\n * Stretch animation on the Y axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `exiting` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\n_defineProperty(StretchOutX, \"presetName\", 'StretchOutX');\nexport class StretchOutY extends ComplexAnimationBuilder {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"build\", () => {\n      const delayFunction = this.getDelayFunction();\n      const [animation, config] = this.getAnimationAndConfig();\n      const delay = this.getDelay();\n      const callback = this.callbackV;\n      const initialValues = this.initialValues;\n      return () => {\n        'worklet';\n\n        return {\n          animations: {\n            transform: [{\n              scaleY: delayFunction(delay, animation(0, config))\n            }]\n          },\n          initialValues: _objectSpread({\n            transform: [{\n              scaleY: 1\n            }]\n          }, initialValues),\n          callback\n        };\n      };\n    });\n  }\n  static createInstance() {\n    return new StretchOutY();\n  }\n}\n_defineProperty(StretchOutY, \"presetName\", 'StretchOutY');","map":{"version":3,"names":["_objectSpread","_defineProperty","ComplexAnimationBuilder","StretchInX","constructor","arguments","delayFunction","getDelayFunction","animation","config","getAnimationAndConfig","delay","getDelay","callback","callbackV","initialValues","animations","transform","scaleX","createInstance","StretchInY","scaleY","StretchOutX","StretchOutY"],"sources":["/Users/carter/WebstormProjects/personal-website/node_modules/react-native-reanimated/src/layoutReanimation/defaultAnimations/Stretch.ts"],"sourcesContent":["'use strict';\nimport type {\n  IEntryExitAnimationBuilder,\n  EntryExitAnimationFunction,\n} from '../animationBuilder/commonTypes';\nimport type { BaseAnimationBuilder } from '../animationBuilder';\nimport { ComplexAnimationBuilder } from '../animationBuilder';\n\n/**\n * Stretch animation on the X axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `entering` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\nexport class StretchInX\n  extends ComplexAnimationBuilder\n  implements IEntryExitAnimationBuilder\n{\n  static presetName = 'StretchInX';\n\n  static createInstance<T extends typeof BaseAnimationBuilder>(\n    this: T\n  ): InstanceType<T> {\n    return new StretchInX() as InstanceType<T>;\n  }\n\n  build = (): EntryExitAnimationFunction => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n\n    return () => {\n      'worklet';\n      return {\n        animations: {\n          transform: [{ scaleX: delayFunction(delay, animation(1, config)) }],\n        },\n        initialValues: {\n          transform: [{ scaleX: 0 }],\n          ...initialValues,\n        },\n        callback,\n      };\n    };\n  };\n}\n\n/**\n * Stretch animation on the Y axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `entering` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\nexport class StretchInY\n  extends ComplexAnimationBuilder\n  implements IEntryExitAnimationBuilder\n{\n  static presetName = 'StretchInY';\n\n  static createInstance<T extends typeof BaseAnimationBuilder>(\n    this: T\n  ): InstanceType<T> {\n    return new StretchInY() as InstanceType<T>;\n  }\n\n  build = (): EntryExitAnimationFunction => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n\n    return () => {\n      'worklet';\n      return {\n        animations: {\n          transform: [{ scaleY: delayFunction(delay, animation(1, config)) }],\n        },\n        initialValues: {\n          transform: [{ scaleY: 0 }],\n          ...initialValues,\n        },\n        callback,\n      };\n    };\n  };\n}\n\n/**\n * Stretch animation on the X axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `exiting` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\nexport class StretchOutX\n  extends ComplexAnimationBuilder\n  implements IEntryExitAnimationBuilder\n{\n  static presetName = 'StretchOutX';\n\n  static createInstance<T extends typeof BaseAnimationBuilder>(\n    this: T\n  ): InstanceType<T> {\n    return new StretchOutX() as InstanceType<T>;\n  }\n\n  build = (): EntryExitAnimationFunction => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n\n    return () => {\n      'worklet';\n      return {\n        animations: {\n          transform: [{ scaleX: delayFunction(delay, animation(0, config)) }],\n        },\n        initialValues: {\n          transform: [{ scaleX: 1 }],\n          ...initialValues,\n        },\n        callback,\n      };\n    };\n  };\n}\n\n/**\n * Stretch animation on the Y axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `exiting` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\nexport class StretchOutY\n  extends ComplexAnimationBuilder\n  implements IEntryExitAnimationBuilder\n{\n  static presetName = 'StretchOutY';\n\n  static createInstance<T extends typeof BaseAnimationBuilder>(\n    this: T\n  ): InstanceType<T> {\n    return new StretchOutY() as InstanceType<T>;\n  }\n\n  build = (): EntryExitAnimationFunction => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n\n    return () => {\n      'worklet';\n      return {\n        animations: {\n          transform: [{ scaleY: delayFunction(delay, animation(0, config)) }],\n        },\n        initialValues: {\n          transform: [{ scaleY: 1 }],\n          ...initialValues,\n        },\n        callback,\n      };\n    };\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}