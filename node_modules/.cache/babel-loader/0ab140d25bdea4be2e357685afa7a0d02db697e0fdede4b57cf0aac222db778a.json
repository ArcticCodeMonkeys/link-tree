{"ast":null,"code":"'use strict';\n\nimport NativeReanimatedModule from './NativeReanimated';\nimport { isJest, shouldBeUseWeb } from \"./PlatformChecker.js\";\nimport { makeShareableCloneOnUIRecursive, makeShareableCloneRecursive } from \"./shareables.js\";\nimport { isWorkletFunction } from \"./commonTypes.js\";\nimport { ReanimatedError } from \"./errors.js\";\nconst IS_JEST = isJest();\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n\n/** An array of [worklet, args] pairs. */\nlet _runOnUIQueue = [];\nexport function setupMicrotasks() {\n  'worklet';\n\n  let microtasksQueue = [];\n  let isExecutingMicrotasksQueue = false;\n  global.queueMicrotask = callback => {\n    microtasksQueue.push(callback);\n  };\n  global.__callMicrotasks = () => {\n    if (isExecutingMicrotasksQueue) {\n      return;\n    }\n    try {\n      isExecutingMicrotasksQueue = true;\n      for (let index = 0; index < microtasksQueue.length; index += 1) {\n        // we use classic 'for' loop because the size of the currentTasks array may change while executing some of the callbacks due to queueMicrotask calls\n        microtasksQueue[index]();\n      }\n      microtasksQueue = [];\n      global._maybeFlushUIUpdatesQueue();\n    } finally {\n      isExecutingMicrotasksQueue = false;\n    }\n  };\n}\nfunction callMicrotasksOnUIThread() {\n  'worklet';\n\n  global.__callMicrotasks();\n}\nexport const callMicrotasks = SHOULD_BE_USE_WEB ? () => {\n  // on web flushing is a noop as immediates are handled by the browser\n} : callMicrotasksOnUIThread;\n\n/**\n * Lets you asynchronously run\n * [workletized](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#to-workletize)\n * functions on the [UI\n * thread](https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnUI).\n *\n * This method does not schedule the work immediately but instead waits for\n * other worklets to be scheduled within the same JS loop. It uses\n * queueMicrotask to schedule all the worklets at once making sure they will run\n * within the same frame boundaries on the UI thread.\n *\n * @param fun - A reference to a function you want to execute on the [UI\n *   thread](https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnUI)\n *   from the [JavaScript\n *   thread](https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnUI).\n * @returns A function that accepts arguments for the function passed as the\n *   first argument.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnUI\n */\n// @ts-expect-error This overload is correct since it's what user sees in his code\n// before it's transformed by Reanimated Babel plugin.\n\nexport function runOnUI(worklet) {\n  'worklet';\n\n  if (__DEV__ && !SHOULD_BE_USE_WEB && _WORKLET) {\n    throw new ReanimatedError('`runOnUI` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.');\n  }\n  if (__DEV__ && !SHOULD_BE_USE_WEB && !isWorkletFunction(worklet)) {\n    throw new ReanimatedError('`runOnUI` can only be used with worklets.');\n  }\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (IS_JEST) {\n      // Mocking time in Jest is tricky as both requestAnimationFrame and queueMicrotask\n      // callbacks run on the same queue and can be interleaved. There is no way\n      // to flush particular queue in Jest and the only control over mocked timers\n      // is by using jest.advanceTimersByTime() method which advances all types\n      // of timers including immediate and animation callbacks. Ideally we'd like\n      // to have some way here to schedule work along with React updates, but\n      // that's not possible, and hence in Jest environment instead of using scheduling\n      // mechanism we just schedule the work ommiting the queue. This is ok for the\n      // uses that we currently have but may not be ok for future tests that we write.\n      NativeReanimatedModule.scheduleOnUI(makeShareableCloneRecursive(() => {\n        'worklet';\n\n        worklet(...args);\n      }));\n      return;\n    }\n    if (__DEV__) {\n      // in DEV mode we call shareable conversion here because in case the object\n      // can't be converted, we will get a meaningful stack-trace as opposed to the\n      // situation when conversion is only done via microtask queue. This does not\n      // make the app particularily less efficient as converted objects are cached\n      // and for a given worklet the conversion only happens once.\n      makeShareableCloneRecursive(worklet);\n      makeShareableCloneRecursive(args);\n    }\n    _runOnUIQueue.push([worklet, args]);\n    if (_runOnUIQueue.length === 1) {\n      queueMicrotask(() => {\n        const queue = _runOnUIQueue;\n        _runOnUIQueue = [];\n        NativeReanimatedModule.scheduleOnUI(makeShareableCloneRecursive(() => {\n          'worklet';\n\n          // eslint-disable-next-line @typescript-eslint/no-shadow\n          queue.forEach(_ref => {\n            let [worklet, args] = _ref;\n            worklet(...args);\n          });\n          callMicrotasks();\n        }));\n      });\n    }\n  };\n}\n\n// @ts-expect-error Check `executeOnUIRuntimeSync` overload above.\n\nexport function executeOnUIRuntimeSync(worklet) {\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return NativeReanimatedModule.executeOnUIRuntimeSync(makeShareableCloneRecursive(() => {\n      'worklet';\n\n      const result = worklet(...args);\n      return makeShareableCloneOnUIRecursive(result);\n    }));\n  };\n}\n\n// @ts-expect-error Check `runOnUI` overload above.\n\n/** Schedule a worklet to execute on the UI runtime skipping batching mechanism. */\nexport function runOnUIImmediately(worklet) {\n  'worklet';\n\n  if (__DEV__ && !SHOULD_BE_USE_WEB && _WORKLET) {\n    throw new ReanimatedError('`runOnUIImmediately` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.');\n  }\n  if (__DEV__ && !SHOULD_BE_USE_WEB && !isWorkletFunction(worklet)) {\n    throw new ReanimatedError('`runOnUIImmediately` can only be used with worklets.');\n  }\n  return function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    NativeReanimatedModule.scheduleOnUI(makeShareableCloneRecursive(() => {\n      'worklet';\n\n      worklet(...args);\n    }));\n  };\n}\nfunction runWorkletOnJS(worklet) {\n  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n  // remote function that calls a worklet synchronously on the JS runtime\n  worklet(...args);\n}\n\n/**\n * Lets you asynchronously run\n * non-[workletized](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#to-workletize)\n * functions that couldn't otherwise run on the [UI\n * thread](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#ui-thread).\n * This applies to most external libraries as they don't have their functions\n * marked with \"worklet\"; directive.\n *\n * @param fun - A reference to a function you want to execute on the JavaScript\n *   thread from the UI thread.\n * @returns A function that accepts arguments for the function passed as the\n *   first argument.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnJS\n */\nexport function runOnJS(fun) {\n  'worklet';\n\n  if (SHOULD_BE_USE_WEB || !_WORKLET) {\n    // if we are already on the JS thread, we just schedule the worklet on the JS queue\n    return function () {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      return queueMicrotask(args.length ? () => fun(...args) : fun);\n    };\n  }\n  if (isWorkletFunction(fun)) {\n    // If `fun` is a worklet, we schedule a call of a remote function `runWorkletOnJS`\n    // and pass the worklet as a first argument followed by original arguments.\n\n    return function () {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      return runOnJS(runWorkletOnJS)(fun, ...args);\n    };\n  }\n  if (fun.__remoteFunction) {\n    // In development mode the function provided as `fun` throws an error message\n    // such that when someone accidentally calls it directly on the UI runtime, they\n    // see that they should use `runOnJS` instead. To facilitate that we put the\n    // reference to the original remote function in the `__remoteFunction` property.\n    fun = fun.__remoteFunction;\n  }\n  const scheduleOnJS = typeof fun === 'function' ? global._scheduleHostFunctionOnJS : global._scheduleRemoteFunctionOnJS;\n  return function () {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    scheduleOnJS(fun, args.length > 0 ?\n    // TODO TYPESCRIPT this cast is terrible but will be fixed\n    makeShareableCloneOnUIRecursive(args) : undefined);\n  };\n}","map":{"version":3,"names":["NativeReanimatedModule","isJest","shouldBeUseWeb","makeShareableCloneOnUIRecursive","makeShareableCloneRecursive","isWorkletFunction","ReanimatedError","IS_JEST","SHOULD_BE_USE_WEB","_runOnUIQueue","setupMicrotasks","microtasksQueue","isExecutingMicrotasksQueue","global","queueMicrotask","callback","push","__callMicrotasks","index","length","_maybeFlushUIUpdatesQueue","callMicrotasksOnUIThread","callMicrotasks","runOnUI","worklet","__DEV__","_WORKLET","_len","arguments","args","Array","_key","scheduleOnUI","queue","forEach","_ref","executeOnUIRuntimeSync","_len2","_key2","result","runOnUIImmediately","_len3","_key3","runWorkletOnJS","_len4","_key4","runOnJS","fun","_len5","_key5","_len6","_key6","__remoteFunction","scheduleOnJS","_scheduleHostFunctionOnJS","_scheduleRemoteFunctionOnJS","_len7","_key7","undefined"],"sources":["/Users/carter/WebstormProjects/personal-website/node_modules/react-native-reanimated/src/threads.ts"],"sourcesContent":["'use strict';\nimport NativeReanimatedModule from './NativeReanimated';\nimport { isJest, shouldBeUseWeb } from './PlatformChecker';\nimport type { WorkletFunction } from './commonTypes';\nimport {\n  makeShareableCloneOnUIRecursive,\n  makeShareableCloneRecursive,\n} from './shareables';\nimport { isWorkletFunction } from './commonTypes';\nimport { ReanimatedError } from './errors';\n\nconst IS_JEST = isJest();\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n\n/** An array of [worklet, args] pairs. */\nlet _runOnUIQueue: Array<[WorkletFunction<unknown[], unknown>, unknown[]]> = [];\n\nexport function setupMicrotasks() {\n  'worklet';\n\n  let microtasksQueue: Array<() => void> = [];\n  let isExecutingMicrotasksQueue = false;\n  global.queueMicrotask = (callback: () => void) => {\n    microtasksQueue.push(callback);\n  };\n\n  global.__callMicrotasks = () => {\n    if (isExecutingMicrotasksQueue) {\n      return;\n    }\n    try {\n      isExecutingMicrotasksQueue = true;\n      for (let index = 0; index < microtasksQueue.length; index += 1) {\n        // we use classic 'for' loop because the size of the currentTasks array may change while executing some of the callbacks due to queueMicrotask calls\n        microtasksQueue[index]();\n      }\n      microtasksQueue = [];\n      global._maybeFlushUIUpdatesQueue();\n    } finally {\n      isExecutingMicrotasksQueue = false;\n    }\n  };\n}\n\nfunction callMicrotasksOnUIThread() {\n  'worklet';\n  global.__callMicrotasks();\n}\n\nexport const callMicrotasks = SHOULD_BE_USE_WEB\n  ? () => {\n      // on web flushing is a noop as immediates are handled by the browser\n    }\n  : callMicrotasksOnUIThread;\n\n/**\n * Lets you asynchronously run\n * [workletized](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#to-workletize)\n * functions on the [UI\n * thread](https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnUI).\n *\n * This method does not schedule the work immediately but instead waits for\n * other worklets to be scheduled within the same JS loop. It uses\n * queueMicrotask to schedule all the worklets at once making sure they will run\n * within the same frame boundaries on the UI thread.\n *\n * @param fun - A reference to a function you want to execute on the [UI\n *   thread](https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnUI)\n *   from the [JavaScript\n *   thread](https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnUI).\n * @returns A function that accepts arguments for the function passed as the\n *   first argument.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnUI\n */\n// @ts-expect-error This overload is correct since it's what user sees in his code\n// before it's transformed by Reanimated Babel plugin.\nexport function runOnUI<Args extends unknown[], ReturnValue>(\n  worklet: (...args: Args) => ReturnValue\n): (...args: Args) => void;\n\nexport function runOnUI<Args extends unknown[], ReturnValue>(\n  worklet: WorkletFunction<Args, ReturnValue>\n): (...args: Args) => void {\n  'worklet';\n  if (__DEV__ && !SHOULD_BE_USE_WEB && _WORKLET) {\n    throw new ReanimatedError(\n      '`runOnUI` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.'\n    );\n  }\n  if (__DEV__ && !SHOULD_BE_USE_WEB && !isWorkletFunction(worklet)) {\n    throw new ReanimatedError('`runOnUI` can only be used with worklets.');\n  }\n  return (...args) => {\n    if (IS_JEST) {\n      // Mocking time in Jest is tricky as both requestAnimationFrame and queueMicrotask\n      // callbacks run on the same queue and can be interleaved. There is no way\n      // to flush particular queue in Jest and the only control over mocked timers\n      // is by using jest.advanceTimersByTime() method which advances all types\n      // of timers including immediate and animation callbacks. Ideally we'd like\n      // to have some way here to schedule work along with React updates, but\n      // that's not possible, and hence in Jest environment instead of using scheduling\n      // mechanism we just schedule the work ommiting the queue. This is ok for the\n      // uses that we currently have but may not be ok for future tests that we write.\n      NativeReanimatedModule.scheduleOnUI(\n        makeShareableCloneRecursive(() => {\n          'worklet';\n          worklet(...args);\n        })\n      );\n      return;\n    }\n    if (__DEV__) {\n      // in DEV mode we call shareable conversion here because in case the object\n      // can't be converted, we will get a meaningful stack-trace as opposed to the\n      // situation when conversion is only done via microtask queue. This does not\n      // make the app particularily less efficient as converted objects are cached\n      // and for a given worklet the conversion only happens once.\n      makeShareableCloneRecursive(worklet);\n      makeShareableCloneRecursive(args);\n    }\n    _runOnUIQueue.push([worklet as WorkletFunction, args]);\n    if (_runOnUIQueue.length === 1) {\n      queueMicrotask(() => {\n        const queue = _runOnUIQueue;\n        _runOnUIQueue = [];\n        NativeReanimatedModule.scheduleOnUI(\n          makeShareableCloneRecursive(() => {\n            'worklet';\n            // eslint-disable-next-line @typescript-eslint/no-shadow\n            queue.forEach(([worklet, args]) => {\n              worklet(...args);\n            });\n            callMicrotasks();\n          })\n        );\n      });\n    }\n  };\n}\n\n// @ts-expect-error Check `executeOnUIRuntimeSync` overload above.\nexport function executeOnUIRuntimeSync<Args extends unknown[], ReturnValue>(\n  worklet: (...args: Args) => ReturnValue\n): (...args: Args) => ReturnValue;\n\nexport function executeOnUIRuntimeSync<Args extends unknown[], ReturnValue>(\n  worklet: WorkletFunction<Args, ReturnValue>\n): (...args: Args) => ReturnValue {\n  return (...args) => {\n    return NativeReanimatedModule.executeOnUIRuntimeSync(\n      makeShareableCloneRecursive(() => {\n        'worklet';\n        const result = worklet(...args);\n        return makeShareableCloneOnUIRecursive(result);\n      })\n    );\n  };\n}\n\n// @ts-expect-error Check `runOnUI` overload above.\nexport function runOnUIImmediately<Args extends unknown[], ReturnValue>(\n  worklet: (...args: Args) => ReturnValue\n): WorkletFunction<Args, ReturnValue>;\n/** Schedule a worklet to execute on the UI runtime skipping batching mechanism. */\nexport function runOnUIImmediately<Args extends unknown[], ReturnValue>(\n  worklet: WorkletFunction<Args, ReturnValue>\n): (...args: Args) => void {\n  'worklet';\n  if (__DEV__ && !SHOULD_BE_USE_WEB && _WORKLET) {\n    throw new ReanimatedError(\n      '`runOnUIImmediately` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.'\n    );\n  }\n  if (__DEV__ && !SHOULD_BE_USE_WEB && !isWorkletFunction(worklet)) {\n    throw new ReanimatedError(\n      '`runOnUIImmediately` can only be used with worklets.'\n    );\n  }\n  return (...args) => {\n    NativeReanimatedModule.scheduleOnUI(\n      makeShareableCloneRecursive(() => {\n        'worklet';\n        worklet(...args);\n      })\n    );\n  };\n}\n\ntype ReleaseRemoteFunction<Args extends unknown[], ReturnValue> = {\n  (...args: Args): ReturnValue;\n};\n\ntype DevRemoteFunction<Args extends unknown[], ReturnValue> = {\n  __remoteFunction: (...args: Args) => ReturnValue;\n};\n\ntype RemoteFunction<Args extends unknown[], ReturnValue> =\n  | ReleaseRemoteFunction<Args, ReturnValue>\n  | DevRemoteFunction<Args, ReturnValue>;\n\nfunction runWorkletOnJS<Args extends unknown[], ReturnValue>(\n  worklet: WorkletFunction<Args, ReturnValue>,\n  ...args: Args\n): void {\n  // remote function that calls a worklet synchronously on the JS runtime\n  worklet(...args);\n}\n\n/**\n * Lets you asynchronously run\n * non-[workletized](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#to-workletize)\n * functions that couldn't otherwise run on the [UI\n * thread](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#ui-thread).\n * This applies to most external libraries as they don't have their functions\n * marked with \"worklet\"; directive.\n *\n * @param fun - A reference to a function you want to execute on the JavaScript\n *   thread from the UI thread.\n * @returns A function that accepts arguments for the function passed as the\n *   first argument.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnJS\n */\nexport function runOnJS<Args extends unknown[], ReturnValue>(\n  fun:\n    | ((...args: Args) => ReturnValue)\n    | RemoteFunction<Args, ReturnValue>\n    | WorkletFunction<Args, ReturnValue>\n): (...args: Args) => void {\n  'worklet';\n  type FunDevRemote = Extract<typeof fun, DevRemoteFunction<Args, ReturnValue>>;\n  if (SHOULD_BE_USE_WEB || !_WORKLET) {\n    // if we are already on the JS thread, we just schedule the worklet on the JS queue\n    return (...args) =>\n      queueMicrotask(\n        args.length\n          ? () => (fun as (...args: Args) => ReturnValue)(...args)\n          : (fun as () => ReturnValue)\n      );\n  }\n  if (isWorkletFunction<Args, ReturnValue>(fun)) {\n    // If `fun` is a worklet, we schedule a call of a remote function `runWorkletOnJS`\n    // and pass the worklet as a first argument followed by original arguments.\n\n    return (...args) =>\n      runOnJS(runWorkletOnJS<Args, ReturnValue>)(\n        fun as WorkletFunction<Args, ReturnValue>,\n        ...args\n      );\n  }\n  if ((fun as FunDevRemote).__remoteFunction) {\n    // In development mode the function provided as `fun` throws an error message\n    // such that when someone accidentally calls it directly on the UI runtime, they\n    // see that they should use `runOnJS` instead. To facilitate that we put the\n    // reference to the original remote function in the `__remoteFunction` property.\n    fun = (fun as FunDevRemote).__remoteFunction;\n  }\n\n  const scheduleOnJS =\n    typeof fun === 'function'\n      ? global._scheduleHostFunctionOnJS\n      : global._scheduleRemoteFunctionOnJS;\n\n  return (...args) => {\n    scheduleOnJS(\n      fun as\n        | ((...args: Args) => ReturnValue)\n        | WorkletFunction<Args, ReturnValue>,\n      args.length > 0\n        ? // TODO TYPESCRIPT this cast is terrible but will be fixed\n          (makeShareableCloneOnUIRecursive(args) as unknown as unknown[])\n        : undefined\n    );\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}