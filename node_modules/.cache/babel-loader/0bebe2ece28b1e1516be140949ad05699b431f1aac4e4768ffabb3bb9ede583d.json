{"ast":null,"code":"'use strict';\n\nimport _objectSpread from \"/Users/carter/WebstormProjects/personal-website/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { PropsAllowlists } from \"./propsAllowlists.js\";\nimport { executeOnUIRuntimeSync, jsiConfigureProps } from \"./core.js\";\nimport { ReanimatedError } from \"./errors.js\";\nimport { updateLoggerConfig } from \"./logger/index.js\";\nimport { shouldBeUseWeb } from \"./PlatformChecker.js\";\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\nfunction assertNoOverlapInLists() {\n  for (const key in PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST) {\n    if (key in PropsAllowlists.UI_THREAD_PROPS_WHITELIST) {\n      throw new ReanimatedError(\"Property `\".concat(key, \"` was whitelisted both as UI and native prop. Please remove it from one of the lists.\"));\n    }\n  }\n}\nexport function configureProps() {\n  assertNoOverlapInLists();\n  jsiConfigureProps(Object.keys(PropsAllowlists.UI_THREAD_PROPS_WHITELIST), Object.keys(PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST));\n}\nexport function addWhitelistedNativeProps(props) {\n  const oldSize = Object.keys(PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST).length;\n  PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST = _objectSpread(_objectSpread({}, PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST), props);\n  if (oldSize !== Object.keys(PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST).length) {\n    configureProps();\n  }\n}\nexport function addWhitelistedUIProps(props) {\n  const oldSize = Object.keys(PropsAllowlists.UI_THREAD_PROPS_WHITELIST).length;\n  PropsAllowlists.UI_THREAD_PROPS_WHITELIST = _objectSpread(_objectSpread({}, PropsAllowlists.UI_THREAD_PROPS_WHITELIST), props);\n  if (oldSize !== Object.keys(PropsAllowlists.UI_THREAD_PROPS_WHITELIST).length) {\n    configureProps();\n  }\n}\n\n/**\n * Updates Reanimated logger config with the user-provided configuration. Will\n * affect Reanimated code executed after call to this function so it should be\n * called before any Reanimated code is executed to take effect. Each call to\n * this function will override the previous configuration (it's recommended to\n * call it only once).\n *\n * @param config - The new logger configuration to apply.\n */\nexport function configureReanimatedLogger(config) {\n  // Update the configuration object in the React runtime\n  updateLoggerConfig(config);\n  // Register the updated configuration in the UI runtime\n  if (!SHOULD_BE_USE_WEB) {\n    executeOnUIRuntimeSync(updateLoggerConfig)(config);\n  }\n}\nconst PROCESSED_VIEW_NAMES = new Set();\n/**\n * Updates UI props whitelist for given view host instance this will work just\n * once for every view name\n */\n\nexport function adaptViewConfig(viewConfig) {\n  const viewName = viewConfig.uiViewClassName;\n  const props = viewConfig.validAttributes;\n\n  // update whitelist of UI props for this view name only once\n  if (!PROCESSED_VIEW_NAMES.has(viewName)) {\n    const propsToAdd = {};\n    Object.keys(props).forEach(key => {\n      // we don't want to add native props as they affect layout\n      // we also skip props which repeat here\n      if (!(key in PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST) && !(key in PropsAllowlists.UI_THREAD_PROPS_WHITELIST)) {\n        propsToAdd[key] = true;\n      }\n    });\n    addWhitelistedUIProps(propsToAdd);\n    PROCESSED_VIEW_NAMES.add(viewName);\n  }\n}\nconfigureProps();","map":{"version":3,"names":["_objectSpread","PropsAllowlists","executeOnUIRuntimeSync","jsiConfigureProps","ReanimatedError","updateLoggerConfig","shouldBeUseWeb","SHOULD_BE_USE_WEB","assertNoOverlapInLists","key","NATIVE_THREAD_PROPS_WHITELIST","UI_THREAD_PROPS_WHITELIST","concat","configureProps","Object","keys","addWhitelistedNativeProps","props","oldSize","length","addWhitelistedUIProps","configureReanimatedLogger","config","PROCESSED_VIEW_NAMES","Set","adaptViewConfig","viewConfig","viewName","uiViewClassName","validAttributes","has","propsToAdd","forEach","add"],"sources":["/Users/carter/WebstormProjects/personal-website/node_modules/react-native-reanimated/src/ConfigHelper.ts"],"sourcesContent":["'use strict';\nimport { PropsAllowlists } from './propsAllowlists';\nimport { executeOnUIRuntimeSync, jsiConfigureProps } from './core';\nimport { ReanimatedError } from './errors';\nimport { updateLoggerConfig } from './logger';\nimport type { LoggerConfig } from './logger';\nimport { shouldBeUseWeb } from './PlatformChecker';\n\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n\nfunction assertNoOverlapInLists() {\n  for (const key in PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST) {\n    if (key in PropsAllowlists.UI_THREAD_PROPS_WHITELIST) {\n      throw new ReanimatedError(\n        `Property \\`${key}\\` was whitelisted both as UI and native prop. Please remove it from one of the lists.`\n      );\n    }\n  }\n}\n\nexport function configureProps(): void {\n  assertNoOverlapInLists();\n  jsiConfigureProps(\n    Object.keys(PropsAllowlists.UI_THREAD_PROPS_WHITELIST),\n    Object.keys(PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST)\n  );\n}\n\nexport function addWhitelistedNativeProps(\n  props: Record<string, boolean>\n): void {\n  const oldSize = Object.keys(\n    PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST\n  ).length;\n  PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST = {\n    ...PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST,\n    ...props,\n  };\n  if (\n    oldSize !==\n    Object.keys(PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST).length\n  ) {\n    configureProps();\n  }\n}\n\nexport function addWhitelistedUIProps(props: Record<string, boolean>): void {\n  const oldSize = Object.keys(PropsAllowlists.UI_THREAD_PROPS_WHITELIST).length;\n  PropsAllowlists.UI_THREAD_PROPS_WHITELIST = {\n    ...PropsAllowlists.UI_THREAD_PROPS_WHITELIST,\n    ...props,\n  };\n  if (\n    oldSize !== Object.keys(PropsAllowlists.UI_THREAD_PROPS_WHITELIST).length\n  ) {\n    configureProps();\n  }\n}\n\n/**\n * Updates Reanimated logger config with the user-provided configuration. Will\n * affect Reanimated code executed after call to this function so it should be\n * called before any Reanimated code is executed to take effect. Each call to\n * this function will override the previous configuration (it's recommended to\n * call it only once).\n *\n * @param config - The new logger configuration to apply.\n */\nexport function configureReanimatedLogger(config: LoggerConfig) {\n  // Update the configuration object in the React runtime\n  updateLoggerConfig(config);\n  // Register the updated configuration in the UI runtime\n  if (!SHOULD_BE_USE_WEB) {\n    executeOnUIRuntimeSync(updateLoggerConfig)(config);\n  }\n}\n\nconst PROCESSED_VIEW_NAMES = new Set();\n\nexport interface ViewConfig {\n  uiViewClassName: string;\n  validAttributes: Record<string, unknown>;\n}\n/**\n * Updates UI props whitelist for given view host instance this will work just\n * once for every view name\n */\n\nexport function adaptViewConfig(viewConfig: ViewConfig): void {\n  const viewName = viewConfig.uiViewClassName;\n  const props = viewConfig.validAttributes;\n\n  // update whitelist of UI props for this view name only once\n  if (!PROCESSED_VIEW_NAMES.has(viewName)) {\n    const propsToAdd: Record<string, boolean> = {};\n    Object.keys(props).forEach((key) => {\n      // we don't want to add native props as they affect layout\n      // we also skip props which repeat here\n      if (\n        !(key in PropsAllowlists.NATIVE_THREAD_PROPS_WHITELIST) &&\n        !(key in PropsAllowlists.UI_THREAD_PROPS_WHITELIST)\n      ) {\n        propsToAdd[key] = true;\n      }\n    });\n    addWhitelistedUIProps(propsToAdd);\n\n    PROCESSED_VIEW_NAMES.add(viewName);\n  }\n}\n\nconfigureProps();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}