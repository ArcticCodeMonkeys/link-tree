{"ast":null,"code":"'use strict';\n\nimport { ComplexAnimationBuilder } from \"../animationBuilder/index.js\";\n\n/**\n * Stretch animation on the X axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `entering` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\nexport class StretchInX extends ComplexAnimationBuilder {\n  static presetName = 'StretchInX';\n  static createInstance() {\n    return new StretchInX();\n  }\n  build = () => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n    return () => {\n      'worklet';\n\n      return {\n        animations: {\n          transform: [{\n            scaleX: delayFunction(delay, animation(1, config))\n          }]\n        },\n        initialValues: {\n          transform: [{\n            scaleX: 0\n          }],\n          ...initialValues\n        },\n        callback\n      };\n    };\n  };\n}\n\n/**\n * Stretch animation on the Y axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `entering` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\nexport class StretchInY extends ComplexAnimationBuilder {\n  static presetName = 'StretchInY';\n  static createInstance() {\n    return new StretchInY();\n  }\n  build = () => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n    return () => {\n      'worklet';\n\n      return {\n        animations: {\n          transform: [{\n            scaleY: delayFunction(delay, animation(1, config))\n          }]\n        },\n        initialValues: {\n          transform: [{\n            scaleY: 0\n          }],\n          ...initialValues\n        },\n        callback\n      };\n    };\n  };\n}\n\n/**\n * Stretch animation on the X axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `exiting` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\nexport class StretchOutX extends ComplexAnimationBuilder {\n  static presetName = 'StretchOutX';\n  static createInstance() {\n    return new StretchOutX();\n  }\n  build = () => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n    return () => {\n      'worklet';\n\n      return {\n        animations: {\n          transform: [{\n            scaleX: delayFunction(delay, animation(0, config))\n          }]\n        },\n        initialValues: {\n          transform: [{\n            scaleX: 1\n          }],\n          ...initialValues\n        },\n        callback\n      };\n    };\n  };\n}\n\n/**\n * Stretch animation on the Y axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `exiting` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\nexport class StretchOutY extends ComplexAnimationBuilder {\n  static presetName = 'StretchOutY';\n  static createInstance() {\n    return new StretchOutY();\n  }\n  build = () => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n    return () => {\n      'worklet';\n\n      return {\n        animations: {\n          transform: [{\n            scaleY: delayFunction(delay, animation(0, config))\n          }]\n        },\n        initialValues: {\n          transform: [{\n            scaleY: 1\n          }],\n          ...initialValues\n        },\n        callback\n      };\n    };\n  };\n}","map":{"version":3,"names":["ComplexAnimationBuilder","StretchInX","presetName","createInstance","build","delayFunction","getDelayFunction","animation","config","getAnimationAndConfig","delay","getDelay","callback","callbackV","initialValues","animations","transform","scaleX","StretchInY","scaleY","StretchOutX","StretchOutY"],"sources":["/Users/carter/WebstormProjects/personal-website/node_modules/react-native-reanimated/src/layoutReanimation/defaultAnimations/Stretch.ts"],"sourcesContent":["'use strict';\nimport type {\n  IEntryExitAnimationBuilder,\n  EntryExitAnimationFunction,\n} from '../animationBuilder/commonTypes';\nimport type { BaseAnimationBuilder } from '../animationBuilder';\nimport { ComplexAnimationBuilder } from '../animationBuilder';\n\n/**\n * Stretch animation on the X axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `entering` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\nexport class StretchInX\n  extends ComplexAnimationBuilder\n  implements IEntryExitAnimationBuilder\n{\n  static presetName = 'StretchInX';\n\n  static createInstance<T extends typeof BaseAnimationBuilder>(\n    this: T\n  ): InstanceType<T> {\n    return new StretchInX() as InstanceType<T>;\n  }\n\n  build = (): EntryExitAnimationFunction => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n\n    return () => {\n      'worklet';\n      return {\n        animations: {\n          transform: [{ scaleX: delayFunction(delay, animation(1, config)) }],\n        },\n        initialValues: {\n          transform: [{ scaleX: 0 }],\n          ...initialValues,\n        },\n        callback,\n      };\n    };\n  };\n}\n\n/**\n * Stretch animation on the Y axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `entering` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\nexport class StretchInY\n  extends ComplexAnimationBuilder\n  implements IEntryExitAnimationBuilder\n{\n  static presetName = 'StretchInY';\n\n  static createInstance<T extends typeof BaseAnimationBuilder>(\n    this: T\n  ): InstanceType<T> {\n    return new StretchInY() as InstanceType<T>;\n  }\n\n  build = (): EntryExitAnimationFunction => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n\n    return () => {\n      'worklet';\n      return {\n        animations: {\n          transform: [{ scaleY: delayFunction(delay, animation(1, config)) }],\n        },\n        initialValues: {\n          transform: [{ scaleY: 0 }],\n          ...initialValues,\n        },\n        callback,\n      };\n    };\n  };\n}\n\n/**\n * Stretch animation on the X axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `exiting` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\nexport class StretchOutX\n  extends ComplexAnimationBuilder\n  implements IEntryExitAnimationBuilder\n{\n  static presetName = 'StretchOutX';\n\n  static createInstance<T extends typeof BaseAnimationBuilder>(\n    this: T\n  ): InstanceType<T> {\n    return new StretchOutX() as InstanceType<T>;\n  }\n\n  build = (): EntryExitAnimationFunction => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n\n    return () => {\n      'worklet';\n      return {\n        animations: {\n          transform: [{ scaleX: delayFunction(delay, animation(0, config)) }],\n        },\n        initialValues: {\n          transform: [{ scaleX: 1 }],\n          ...initialValues,\n        },\n        callback,\n      };\n    };\n  };\n}\n\n/**\n * Stretch animation on the Y axis. You can modify the behavior by chaining\n * methods like `.springify()` or `.duration(500)`.\n *\n * You pass it to the `exiting` prop on [an Animated\n * component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).\n *\n * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch\n */\nexport class StretchOutY\n  extends ComplexAnimationBuilder\n  implements IEntryExitAnimationBuilder\n{\n  static presetName = 'StretchOutY';\n\n  static createInstance<T extends typeof BaseAnimationBuilder>(\n    this: T\n  ): InstanceType<T> {\n    return new StretchOutY() as InstanceType<T>;\n  }\n\n  build = (): EntryExitAnimationFunction => {\n    const delayFunction = this.getDelayFunction();\n    const [animation, config] = this.getAnimationAndConfig();\n    const delay = this.getDelay();\n    const callback = this.callbackV;\n    const initialValues = this.initialValues;\n\n    return () => {\n      'worklet';\n      return {\n        animations: {\n          transform: [{ scaleY: delayFunction(delay, animation(0, config)) }],\n        },\n        initialValues: {\n          transform: [{ scaleY: 1 }],\n          ...initialValues,\n        },\n        callback,\n      };\n    };\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}