{"ast":null,"code":"/* eslint-disable reanimated/use-reanimated-error */\n'use strict';\n\n// signed type\nconst ReanimatedErrorConstructor = function ReanimatedError(message) {\n  'worklet';\n\n  const prefix = '[Reanimated]';\n  const errorInstance = new Error(message ? \"\".concat(prefix, \" \").concat(message) : prefix);\n  errorInstance.name = 'ReanimatedError';\n  return errorInstance;\n};\nexport { ReanimatedErrorConstructor as ReanimatedError };\n\n/**\n * Registers `ReanimatedError` in global scope. Use it only for Worklet\n * runtimes.\n */\nexport function registerReanimatedError() {\n  'worklet';\n\n  if (!_WORKLET) {\n    throw new Error('[Reanimated] registerReanimatedError() must be called on Worklet runtime');\n  }\n  global.ReanimatedError = ReanimatedErrorConstructor;\n}\nconst _workletStackDetails = new Map();\nexport function registerWorkletStackDetails(hash, stackDetails) {\n  _workletStackDetails.set(hash, stackDetails);\n}\nfunction getBundleOffset(error) {\n  var _error$stack;\n  const frame = (_error$stack = error.stack) === null || _error$stack === void 0 || (_error$stack = _error$stack.split('\\n')) === null || _error$stack === void 0 ? void 0 : _error$stack[0];\n  if (frame) {\n    const parsedFrame = /@([^@]+):(\\d+):(\\d+)/.exec(frame);\n    if (parsedFrame) {\n      const [, file, line, col] = parsedFrame;\n      return [file, Number(line), Number(col)];\n    }\n  }\n  return ['unknown', 0, 0];\n}\nfunction processStack(stack) {\n  const workletStackEntries = stack.match(/worklet_(\\d+):(\\d+):(\\d+)/g);\n  let result = stack;\n  workletStackEntries === null || workletStackEntries === void 0 || workletStackEntries.forEach(match => {\n    const [, hash, origLine, origCol] = match.split(/:|_/).map(Number);\n    const errorDetails = _workletStackDetails.get(hash);\n    if (!errorDetails) {\n      return;\n    }\n    const [error, lineOffset, colOffset] = errorDetails;\n    const [bundleFile, bundleLine, bundleCol] = getBundleOffset(error);\n    const line = origLine + bundleLine + lineOffset;\n    const col = origCol + bundleCol + colOffset;\n    result = result.replace(match, \"\".concat(bundleFile, \":\").concat(line, \":\").concat(col));\n  });\n  return result;\n}\nexport function reportFatalErrorOnJS(_ref) {\n  let {\n    message,\n    stack\n  } = _ref;\n  const error = new Error();\n  error.message = message;\n  error.stack = stack ? processStack(stack) : undefined;\n  error.name = 'ReanimatedError';\n  // @ts-ignore React Native's ErrorUtils implementation extends the Error type with jsEngine field\n  error.jsEngine = 'reanimated';\n  // @ts-ignore the reportFatalError method is an internal method of ErrorUtils not exposed in the type definitions\n  global.ErrorUtils.reportFatalError(error);\n}","map":{"version":3,"names":["ReanimatedErrorConstructor","ReanimatedError","message","prefix","errorInstance","Error","concat","name","registerReanimatedError","_WORKLET","global","_workletStackDetails","Map","registerWorkletStackDetails","hash","stackDetails","set","getBundleOffset","error","_error$stack","frame","stack","split","parsedFrame","exec","file","line","col","Number","processStack","workletStackEntries","match","result","forEach","origLine","origCol","map","errorDetails","get","lineOffset","colOffset","bundleFile","bundleLine","bundleCol","replace","reportFatalErrorOnJS","_ref","undefined","jsEngine","ErrorUtils","reportFatalError"],"sources":["/Users/carter/WebstormProjects/personal-website/node_modules/react-native-reanimated/src/errors.ts"],"sourcesContent":["/* eslint-disable reanimated/use-reanimated-error */\n'use strict';\nimport type { WorkletStackDetails } from './commonTypes';\n\ntype ReanimatedError = Error & 'ReanimatedError'; // signed type\n\ninterface ReanimatedErrorConstructor extends Error {\n  new (message?: string): ReanimatedError;\n  (message?: string): ReanimatedError;\n  readonly prototype: ReanimatedError;\n}\n\nconst ReanimatedErrorConstructor: ReanimatedErrorConstructor =\n  function ReanimatedError(message?: string) {\n    'worklet';\n    const prefix = '[Reanimated]';\n    const errorInstance = new Error(message ? `${prefix} ${message}` : prefix);\n    errorInstance.name = 'ReanimatedError';\n    return errorInstance;\n  } as ReanimatedErrorConstructor;\n\nexport { ReanimatedErrorConstructor as ReanimatedError };\n\n/**\n * Registers `ReanimatedError` in global scope. Use it only for Worklet\n * runtimes.\n */\nexport function registerReanimatedError() {\n  'worklet';\n  if (!_WORKLET) {\n    throw new Error(\n      '[Reanimated] registerReanimatedError() must be called on Worklet runtime'\n    );\n  }\n  (global as Record<string, unknown>).ReanimatedError =\n    ReanimatedErrorConstructor;\n}\n\nconst _workletStackDetails = new Map<number, WorkletStackDetails>();\n\nexport function registerWorkletStackDetails(\n  hash: number,\n  stackDetails: WorkletStackDetails\n) {\n  _workletStackDetails.set(hash, stackDetails);\n}\n\nfunction getBundleOffset(error: Error): [string, number, number] {\n  const frame = error.stack?.split('\\n')?.[0];\n  if (frame) {\n    const parsedFrame = /@([^@]+):(\\d+):(\\d+)/.exec(frame);\n    if (parsedFrame) {\n      const [, file, line, col] = parsedFrame;\n      return [file, Number(line), Number(col)];\n    }\n  }\n  return ['unknown', 0, 0];\n}\n\nfunction processStack(stack: string): string {\n  const workletStackEntries = stack.match(/worklet_(\\d+):(\\d+):(\\d+)/g);\n  let result = stack;\n  workletStackEntries?.forEach((match) => {\n    const [, hash, origLine, origCol] = match.split(/:|_/).map(Number);\n    const errorDetails = _workletStackDetails.get(hash);\n    if (!errorDetails) {\n      return;\n    }\n    const [error, lineOffset, colOffset] = errorDetails;\n    const [bundleFile, bundleLine, bundleCol] = getBundleOffset(error);\n    const line = origLine + bundleLine + lineOffset;\n    const col = origCol + bundleCol + colOffset;\n\n    result = result.replace(match, `${bundleFile}:${line}:${col}`);\n  });\n  return result;\n}\n\nexport function reportFatalErrorOnJS({\n  message,\n  stack,\n}: {\n  message: string;\n  stack?: string;\n}) {\n  const error = new Error();\n  error.message = message;\n  error.stack = stack ? processStack(stack) : undefined;\n  error.name = 'ReanimatedError';\n  // @ts-ignore React Native's ErrorUtils implementation extends the Error type with jsEngine field\n  error.jsEngine = 'reanimated';\n  // @ts-ignore the reportFatalError method is an internal method of ErrorUtils not exposed in the type definitions\n  global.ErrorUtils.reportFatalError(error);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}