{"ast":null,"code":"'use strict';\n\nimport _objectSpread from \"/Users/carter/WebstormProjects/personal-website/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { addLogBoxLog } from \"./LogBox.js\";\nconst DOCS_URL = 'https://docs.swmansion.com/react-native-reanimated/docs/debugging/logger-configuration';\nconst DOCS_REFERENCE = \"If you don't want to see this message, you can disable the `strict` mode. Refer to:\\n\".concat(DOCS_URL, \" for more details.\");\nexport let LogLevel = /*#__PURE__*/function (LogLevel) {\n  LogLevel[LogLevel[\"warn\"] = 1] = \"warn\";\n  LogLevel[LogLevel[\"error\"] = 2] = \"error\";\n  return LogLevel;\n}({});\nfunction logToConsole(data) {\n  'worklet';\n\n  switch (data.level) {\n    case 'warn':\n      console.warn(data.message.content);\n      break;\n    case 'error':\n    case 'fatal':\n    case 'syntax':\n      console.error(data.message.content);\n      break;\n  }\n}\nexport const DEFAULT_LOGGER_CONFIG = {\n  logFunction: logToConsole,\n  level: LogLevel.warn,\n  strict: true\n};\nfunction formatMessage(message) {\n  'worklet';\n\n  return \"[Reanimated] \".concat(message);\n}\nfunction createLog(level, message) {\n  'worklet';\n\n  const formattedMessage = formatMessage(message);\n  return {\n    level,\n    message: {\n      content: formattedMessage,\n      substitutions: []\n    },\n    category: formattedMessage,\n    componentStack: [],\n    componentStackType: null,\n    // eslint-disable-next-line reanimated/use-reanimated-error\n    stack: new Error().stack\n  };\n}\n\n/**\n * Function that logs to LogBox and console. Used to replace the default console\n * logging with logging to LogBox on the UI thread when runOnJS is available.\n *\n * @param data - The details of the log.\n */\nexport function logToLogBoxAndConsole(data) {\n  addLogBoxLog(data);\n  logToConsole(data);\n}\n\n/**\n * Registers the logger configuration. use it only for Worklet runtimes.\n *\n * @param config - The config to register.\n */\nexport function registerLoggerConfig(config) {\n  'worklet';\n\n  global.__reanimatedLoggerConfig = config;\n}\n\n/**\n * Replaces the default log function with a custom implementation.\n *\n * @param logFunction - The custom log function.\n */\nexport function replaceLoggerImplementation(logFunction) {\n  'worklet';\n\n  registerLoggerConfig(_objectSpread(_objectSpread({}, __reanimatedLoggerConfig), {}, {\n    logFunction\n  }));\n}\n\n/**\n * Updates logger configuration.\n *\n * @param options - The new logger configuration to apply.\n *\n *   - Level: The minimum log level to display.\n *   - Strict: Whether to log warnings and errors that are not strict. Defaults to\n *       false.\n */\nexport function updateLoggerConfig(options) {\n  'worklet';\n\n  var _options$level, _options$strict;\n  registerLoggerConfig(_objectSpread(_objectSpread({}, __reanimatedLoggerConfig), {}, {\n    // Don't reuse previous level and strict values from the global config\n    level: (_options$level = options === null || options === void 0 ? void 0 : options.level) !== null && _options$level !== void 0 ? _options$level : DEFAULT_LOGGER_CONFIG.level,\n    strict: (_options$strict = options === null || options === void 0 ? void 0 : options.strict) !== null && _options$strict !== void 0 ? _options$strict : DEFAULT_LOGGER_CONFIG.strict\n  }));\n}\nfunction handleLog(level, message, options) {\n  'worklet';\n\n  const config = __reanimatedLoggerConfig;\n  if (\n  // Don't log if the log is marked as strict-only and the config doesn't\n  // enable strict logging\n  options.strict && !config.strict ||\n  // Don't log if the log level is below the minimum configured level\n  LogLevel[level] < config.level) {\n    return;\n  }\n  if (options.strict) {\n    message += \"\\n\\n\".concat(DOCS_REFERENCE);\n  }\n  config.logFunction(createLog(level, message));\n}\nexport const logger = {\n  warn(message) {\n    'worklet';\n\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    handleLog('warn', message, options);\n  },\n  error(message) {\n    'worklet';\n\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    handleLog('error', message, options);\n  }\n};","map":{"version":3,"names":["_objectSpread","addLogBoxLog","DOCS_URL","DOCS_REFERENCE","concat","LogLevel","logToConsole","data","level","console","warn","message","content","error","DEFAULT_LOGGER_CONFIG","logFunction","strict","formatMessage","createLog","formattedMessage","substitutions","category","componentStack","componentStackType","stack","Error","logToLogBoxAndConsole","registerLoggerConfig","config","global","__reanimatedLoggerConfig","replaceLoggerImplementation","updateLoggerConfig","options","_options$level","_options$strict","handleLog","logger","arguments","length","undefined"],"sources":["/Users/carter/WebstormProjects/personal-website/node_modules/react-native-reanimated/src/logger/logger.ts"],"sourcesContent":["'use strict';\nimport { addLogBoxLog } from './LogBox';\nimport type { LogData, LogBoxLogLevel } from './LogBox';\n\nconst DOCS_URL =\n  'https://docs.swmansion.com/react-native-reanimated/docs/debugging/logger-configuration';\nconst DOCS_REFERENCE = `If you don't want to see this message, you can disable the \\`strict\\` mode. Refer to:\\n${DOCS_URL} for more details.`;\n\ntype LogFunction = (data: LogData) => void;\n\nexport enum LogLevel {\n  warn = 1,\n  error = 2,\n}\n\nexport type LoggerConfig = {\n  level?: LogLevel;\n  strict?: boolean;\n};\n\nexport type LoggerConfigInternal = {\n  logFunction: LogFunction;\n} & Required<LoggerConfig>;\n\nfunction logToConsole(data: LogData) {\n  'worklet';\n  switch (data.level) {\n    case 'warn':\n      console.warn(data.message.content);\n      break;\n    case 'error':\n    case 'fatal':\n    case 'syntax':\n      console.error(data.message.content);\n      break;\n  }\n}\n\nexport const DEFAULT_LOGGER_CONFIG: LoggerConfigInternal = {\n  logFunction: logToConsole,\n  level: LogLevel.warn,\n  strict: true,\n};\n\nfunction formatMessage(message: string) {\n  'worklet';\n  return `[Reanimated] ${message}`;\n}\n\nfunction createLog(level: LogBoxLogLevel, message: string): LogData {\n  'worklet';\n  const formattedMessage = formatMessage(message);\n\n  return {\n    level,\n    message: {\n      content: formattedMessage,\n      substitutions: [],\n    },\n    category: formattedMessage,\n    componentStack: [],\n    componentStackType: null,\n    // eslint-disable-next-line reanimated/use-reanimated-error\n    stack: new Error().stack,\n  };\n}\n\n/**\n * Function that logs to LogBox and console. Used to replace the default console\n * logging with logging to LogBox on the UI thread when runOnJS is available.\n *\n * @param data - The details of the log.\n */\nexport function logToLogBoxAndConsole(data: LogData) {\n  addLogBoxLog(data);\n  logToConsole(data);\n}\n\n/**\n * Registers the logger configuration. use it only for Worklet runtimes.\n *\n * @param config - The config to register.\n */\nexport function registerLoggerConfig(config: LoggerConfigInternal) {\n  'worklet';\n  global.__reanimatedLoggerConfig = config;\n}\n\n/**\n * Replaces the default log function with a custom implementation.\n *\n * @param logFunction - The custom log function.\n */\nexport function replaceLoggerImplementation(logFunction: LogFunction) {\n  'worklet';\n  registerLoggerConfig({ ...__reanimatedLoggerConfig, logFunction });\n}\n\n/**\n * Updates logger configuration.\n *\n * @param options - The new logger configuration to apply.\n *\n *   - Level: The minimum log level to display.\n *   - Strict: Whether to log warnings and errors that are not strict. Defaults to\n *       false.\n */\nexport function updateLoggerConfig(options?: Partial<LoggerConfig>) {\n  'worklet';\n  registerLoggerConfig({\n    ...__reanimatedLoggerConfig,\n    // Don't reuse previous level and strict values from the global config\n    level: options?.level ?? DEFAULT_LOGGER_CONFIG.level,\n    strict: options?.strict ?? DEFAULT_LOGGER_CONFIG.strict,\n  });\n}\n\ntype LogOptions = {\n  strict?: boolean;\n};\n\nfunction handleLog(\n  level: Exclude<LogBoxLogLevel, 'syntax' | 'fatal'>,\n  message: string,\n  options: LogOptions\n) {\n  'worklet';\n  const config = __reanimatedLoggerConfig;\n  if (\n    // Don't log if the log is marked as strict-only and the config doesn't\n    // enable strict logging\n    (options.strict && !config.strict) ||\n    // Don't log if the log level is below the minimum configured level\n    LogLevel[level] < config.level\n  ) {\n    return;\n  }\n\n  if (options.strict) {\n    message += `\\n\\n${DOCS_REFERENCE}`;\n  }\n\n  config.logFunction(createLog(level, message));\n}\n\nexport const logger = {\n  warn(message: string, options: LogOptions = {}) {\n    'worklet';\n    handleLog('warn', message, options);\n  },\n  error(message: string, options: LogOptions = {}) {\n    'worklet';\n    handleLog('error', message, options);\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}